(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{59:function(t,e,r){t.exports=r.p+"assets/img/5-1watch-flow.fc17e57d.png"},75:function(t,e,r){"use strict";r.r(e);var a=[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"_5-1-工作原理概括"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-工作原理概括","aria-hidden":"true"}},[this._v("#")]),this._v(" 5-1 工作原理概括")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 基本概念")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v("Entry")]),t._v("：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")]),r("li",[r("strong",[t._v("Module")]),t._v("：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")]),r("li",[r("strong",[t._v("Chunk")]),t._v("：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。")]),r("li",[r("strong",[t._v("Loader")]),t._v("：模块转换器，用于把模块原内容按照需求转换成新内容。")]),r("li",[r("strong",[t._v("Plugin")]),t._v("：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"流程概括"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程概括","aria-hidden":"true"}},[this._v("#")]),this._v(" 流程概括")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")]),r("li",[t._v("开始编译：用上一步得到的参数初始化 "),r("code",[t._v("Compiler")]),t._v(" 对象，加载所有配置的插件，执行对象的 "),r("code",[t._v("run")]),t._v(" 方法开始执行编译；")]),r("li",[t._v("确定入口：根据配置中的 entry 找出所有的入口文件；")]),r("li",[t._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")]),r("li",[t._v("完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")]),r("li",[t._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")]),r("li",[t._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在以上过程中，Webpack 会在特定的时间点"),e("strong",[this._v("广播出特定的事件")]),this._v("，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"流程细节"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流程细节","aria-hidden":"true"}},[this._v("#")]),this._v(" 流程细节")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("初始化：启动构建，"),r("strong",[t._v("读取与合并配置参数")]),t._v("，加载 Plugin，实例化 "),r("code",[t._v("Compiler")]),t._v("。")]),r("li",[t._v("编译：从 "),r("code",[t._v("Entry")]),t._v(" 发出，针对每个 "),r("code",[t._v("Module")]),r("strong",[t._v("串行调用")]),t._v("对应的 Loader 去翻译文件内容，再找到该 Module 依赖的 Module，递归地进行编译处理。")]),r("li",[t._v("输出：对编译后的 Module 组合成 Chunk，把 Chunk 转换成文件，输出到文件系统。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:r(59),alt:"图5-1-1 监听模式的构建流程"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"初始化阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化阶段","aria-hidden":"true"}},[this._v("#")]),this._v(" 初始化阶段")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("事件名")]),r("th",[t._v("解释")])])]),r("tbody",[r("tr",[r("td",[t._v("初始化参数")]),r("td",[t._v("从配置文件和 Shell 语句中读取与合并参数，得出最终的参数。 这个过程中还会执行配置文件中的插件实例化语句 "),r("code",[t._v("new Plugin()")]),t._v("。")])]),r("tr",[r("td",[t._v("实例化 Compiler")]),r("td",[t._v("用上一步得到的参数初始化 Compiler 实例，Compiler 负责文件监听和启动编译。Compiler 实例中包含了完整的 Webpack 配置，全局只有一个 Compiler 实例。")])]),r("tr",[r("td",[t._v("加载插件")]),r("td",[t._v("依次调用插件的 apply 方法，让插件可以监听后续的所有事件节点。同时给插件传入 compiler 实例的引用，以方便插件通过 compiler 调用 Webpack 提供的 API。")])]),r("tr",[r("td",[r("code",[t._v("environment")])]),r("td",[t._v("开始应用 Node.js 风格的文件系统到 compiler 对象，以方便后续的文件寻找和读取。")])]),r("tr",[r("td",[r("code",[t._v("entry-option")])]),r("td",[t._v("读取配置的 Entrys，为每个 Entry 实例化一个对应的 EntryPlugin，为后面该 Entry 的递归解析工作做准备。")])]),r("tr",[r("td",[r("code",[t._v("after-plugins")])]),r("td",[t._v("调用完所有内置的和配置的插件的 apply 方法。")])]),r("tr",[r("td",[r("code",[t._v("after-resolvers")])]),r("td",[t._v("根据配置初始化完 resolver，resolver 负责在文件系统中寻找指定路径的文件。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"编译阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译阶段","aria-hidden":"true"}},[this._v("#")]),this._v(" 编译阶段")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("事件名")]),r("th",[t._v("解释")])])]),r("tbody",[r("tr",[r("td",[r("code",[t._v("run")])]),r("td",[t._v("启动一次新的编译。")])]),r("tr",[r("td",[r("code",[t._v("watch-run")])]),r("td",[t._v("和 run 类似，区别在于它是在监听模式下启动的编译，在这个事件中可以获取到是哪些文件发生了变化导致重新启动一次新的编译。")])]),r("tr",[r("td",[r("code",[t._v("compile")])]),r("td",[t._v("该事件是为了告诉插件一次新的编译将要启动，同时会给插件带上 compiler 对象。")])]),r("tr",[r("td",[r("code",[t._v("compilation")])]),r("td",[t._v("当 Webpack 以开发模式运行时，每当检测到文件变化，一次新的 Compilation 将被创建。一个 Compilation 对象包含了当前的模块资源、编译生成资源、变化的文件等。Compilation 对象也提供了很多事件回调供插件做扩展。")])]),r("tr",[r("td",[r("code",[t._v("make")])]),r("td",[t._v("一个新的 Compilation 创建完毕，即将从 Entry 开始读取文件，根据文件类型和配置的 Loader 对文件进行编译，编译完后再找出该文件依赖的文件，递归的编译和解析。")])]),r("tr",[r("td",[r("code",[t._v("after-compile")])]),r("td",[t._v("一次 Compilation 执行完成。")])]),r("tr",[r("td",[r("code",[t._v("invalid")])]),r("td",[t._v("当遇到文件不存在、文件编译错误等异常时会触发该事件，该事件不会导致 Webpack 退出。")])])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("事件名")]),r("th",[t._v("解释")])])]),r("tbody",[r("tr",[r("td",[r("code",[t._v("build-module")])]),r("td",[t._v("使用对应的 Loader 去转换一个模块。")])]),r("tr",[r("td",[r("code",[t._v("normal-module-loader")])]),r("td",[t._v("在用 Loader 对一个模块转换完后，使用 acorn 解析转换后的内容，输出对应的抽象语法树（AST），以方便 Webpack 后面对代码的分析。")])]),r("tr",[r("td",[r("code",[t._v("program")])]),r("td",[t._v("从配置的入口模块开始，分析其 AST，当遇到 require 等导入其它模块语句时，便将其加入到依赖的模块列表，同时对新找出的依赖模块递归分析，最终搞清所有模块的依赖关系。")])]),r("tr",[r("td",[r("code",[t._v("seal")])]),r("td",[t._v("所有模块及其依赖的模块都通过 Loader 转换完成后，根据依赖关系开始生成 Chunk。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"输出阶段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#输出阶段","aria-hidden":"true"}},[this._v("#")]),this._v(" 输出阶段")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("table",[r("thead",[r("tr",[r("th",[t._v("事件名")]),r("th",[t._v("解释")])])]),r("tbody",[r("tr",[r("td",[r("code",[t._v("should-emit")])]),r("td",[t._v("所有需要输出的文件已经生成好，询问插件哪些文件需要输出，哪些不需要。")])]),r("tr",[r("td",[r("code",[t._v("emit")])]),r("td",[t._v("确定好要输出哪些文件后，执行文件输出，可以在这里获取和修改输出内容。")])]),r("tr",[r("td",[r("code",[t._v("after-emit")])]),r("td",[t._v("文件输出完毕。")])]),r("tr",[r("td",[r("code",[t._v("done")])]),r("td",[t._v("成功完成一次完成的编译和输出流程。")])]),r("tr",[r("td",[r("code",[t._v("failed")])]),r("td",[t._v("如果在编译和输出流程中遇到异常导致 Webpack 退出时，就会直接跳转到本步骤，插件可以在本事件中获取到具体的错误原因。")])])])])}],_=r(0),i=Object(_.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),r("p",[t._v("Webpack 以其使用简单著称，在使用它的过程中，使用者只需把它当作一个黑盒，需要关心的只有它暴露出来的配置。 本节将带你走进这个黑盒，看看 Webpack 是如何运行的。")]),t._m(1),r("p",[t._v("在了解 Webpack 原理前，需要掌握以下几个核心概念，以方便后面的理解：")]),t._m(2),t._m(3),r("p",[t._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),t._m(4),t._m(5),t._m(6),r("p",[t._v("Webpack 的构建流程可以分为以下三大阶段：")]),t._m(7),r("p",[t._v("如果只执行一次构建，以上阶段将会按照顺序各执行一次。但在开启监听模式下，流程将变为如下：")]),t._m(8),r("p",[t._v("在每个大阶段中又会发生很多事件，Webpack 会把这些事件广播出来供给 Plugin 使用，下面来一一介绍。")]),t._m(9),t._m(10),t._m(11),t._m(12),r("p",[t._v("在编译阶段中，最重要的要数 compilation 事件了，因为在 compilation 阶段调用了 Loader 完成了每个模块的转换操作，在 compilation 阶段又包括很多小的事件，它们分别是：")]),t._m(13),t._m(14),t._m(15),r("p",[t._v("在输出阶段已经得到了各个模块经过转换后的结果和其依赖关系，并且把相关模块组合在一起形成一个个 Chunk。 在输出阶段会根据 Chunk 的类型，使用对应的模版生成最终要要输出的文件内容。")]),r("p",[t._v("至于如何把 Chunk 输出为具体的文件，详情可以阅读 "),r("router-link",{attrs:{to:"./principle-2.html"}},[t._v("输出文件分析")]),t._v("。")],1)])},a,!1,null,null,null);e.default=i.exports}}]);