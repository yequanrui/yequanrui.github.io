{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "AnimationFrameAction",
            "range": [
              9,
              29
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 29
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "AnimationFrameAction",
            "range": [
              9,
              29
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 29
              }
            }
          },
          "range": [
            9,
            29
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 29
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./AnimationFrameAction",
        "raw": "'./AnimationFrameAction'",
        "range": [
          37,
          61
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 37
          },
          "end": {
            "line": 1,
            "column": 61
          }
        }
      },
      "range": [
        0,
        62
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 62
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "AnimationFrameScheduler",
            "range": [
              72,
              95
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 32
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "AnimationFrameScheduler",
            "range": [
              72,
              95
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 32
              }
            }
          },
          "range": [
            72,
            95
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 32
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./AnimationFrameScheduler",
        "raw": "'./AnimationFrameScheduler'",
        "range": [
          103,
          130
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 40
          },
          "end": {
            "line": 2,
            "column": 67
          }
        }
      },
      "range": [
        63,
        131
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 68
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n *\n * 动画帧调度器\n *\n * <span class=\"informal\">当 `window.requestAnimationFrame` 执行的时候触发执行此任务。</span>\n *\n * 当 `animationFrame` 调度器和延时一起使用， 它的行为会回退到 {@link async} 调度器。\n *\n * 如果没有延时, `animationFrame` 调度器可以被用来创建丝滑的浏览器动画。它可以保证在下一次浏览器重绘之前\n * 调度执行任务，从而尽可能高效的执行动画。\n *\n * @example <caption>调度 div 高度的动画</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` 指向当前正在执行的 Action, 我们用新的状态来重新调度它\n * }, 0, 0);\n *\n * // 你将会看到 .some-div 元素的高度一直增长\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n ",
          "range": [
            132,
            768
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "animationFrame",
              "range": [
                782,
                796
              ],
              "loc": {
                "start": {
                  "line": 30,
                  "column": 13
                },
                "end": {
                  "line": 30,
                  "column": 27
                }
              }
            },
            "init": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "AnimationFrameScheduler",
                "range": [
                  803,
                  826
                ],
                "loc": {
                  "start": {
                    "line": 30,
                    "column": 34
                  },
                  "end": {
                    "line": 30,
                    "column": 57
                  }
                }
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "AnimationFrameAction",
                  "range": [
                    827,
                    847
                  ],
                  "loc": {
                    "start": {
                      "line": 30,
                      "column": 58
                    },
                    "end": {
                      "line": 30,
                      "column": 78
                    }
                  }
                }
              ],
              "range": [
                799,
                848
              ],
              "loc": {
                "start": {
                  "line": 30,
                  "column": 30
                },
                "end": {
                  "line": 30,
                  "column": 79
                }
              }
            },
            "range": [
              782,
              848
            ],
            "loc": {
              "start": {
                "line": 30,
                "column": 13
              },
              "end": {
                "line": 30,
                "column": 79
              }
            }
          }
        ],
        "kind": "const",
        "range": [
          776,
          849
        ],
        "loc": {
          "start": {
            "line": 30,
            "column": 7
          },
          "end": {
            "line": 30,
            "column": 80
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n *\n * 动画帧调度器\n *\n * <span class=\"informal\">当 `window.requestAnimationFrame` 执行的时候触发执行此任务。</span>\n *\n * 当 `animationFrame` 调度器和延时一起使用， 它的行为会回退到 {@link async} 调度器。\n *\n * 如果没有延时, `animationFrame` 调度器可以被用来创建丝滑的浏览器动画。它可以保证在下一次浏览器重绘之前\n * 调度执行任务，从而尽可能高效的执行动画。\n *\n * @example <caption>调度 div 高度的动画</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` 指向当前正在执行的 Action, 我们用新的状态来重新调度它\n * }, 0, 0);\n *\n * // 你将会看到 .some-div 元素的高度一直增长\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n ",
            "range": [
              132,
              768
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 29,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=animationFrame.js.map",
            "range": [
              850,
              892
            ],
            "loc": {
              "start": {
                "line": 31,
                "column": 0
              },
              "end": {
                "line": 31,
                "column": 42
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        769,
        849
      ],
      "loc": {
        "start": {
          "line": 30,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 80
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n *\n * 动画帧调度器\n *\n * <span class=\"informal\">当 `window.requestAnimationFrame` 执行的时候触发执行此任务。</span>\n *\n * 当 `animationFrame` 调度器和延时一起使用， 它的行为会回退到 {@link async} 调度器。\n *\n * 如果没有延时, `animationFrame` 调度器可以被用来创建丝滑的浏览器动画。它可以保证在下一次浏览器重绘之前\n * 调度执行任务，从而尽可能高效的执行动画。\n *\n * @example <caption>调度 div 高度的动画</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` 指向当前正在执行的 Action, 我们用新的状态来重新调度它\n * }, 0, 0);\n *\n * // 你将会看到 .some-div 元素的高度一直增长\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n ",
          "range": [
            132,
            768
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=animationFrame.js.map",
          "range": [
            850,
            892
          ],
          "loc": {
            "start": {
              "line": 31,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 42
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    849
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 30,
      "column": 80
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n *\n * 动画帧调度器\n *\n * <span class=\"informal\">当 `window.requestAnimationFrame` 执行的时候触发执行此任务。</span>\n *\n * 当 `animationFrame` 调度器和延时一起使用， 它的行为会回退到 {@link async} 调度器。\n *\n * 如果没有延时, `animationFrame` 调度器可以被用来创建丝滑的浏览器动画。它可以保证在下一次浏览器重绘之前\n * 调度执行任务，从而尽可能高效的执行动画。\n *\n * @example <caption>调度 div 高度的动画</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` 指向当前正在执行的 Action, 我们用新的状态来重新调度它\n * }, 0, 0);\n *\n * // 你将会看到 .some-div 元素的高度一直增长\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n ",
      "range": [
        132,
        768
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 29,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=animationFrame.js.map",
      "range": [
        850,
        892
      ],
      "loc": {
        "start": {
          "line": 31,
          "column": 0
        },
        "end": {
          "line": 31,
          "column": 42
        }
      }
    }
  ]
}