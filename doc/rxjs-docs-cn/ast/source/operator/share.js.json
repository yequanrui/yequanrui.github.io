{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "multicast",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "multicast",
            "range": [
              9,
              18
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 18
              }
            }
          },
          "range": [
            9,
            18
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 18
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./multicast",
        "raw": "'./multicast'",
        "range": [
          26,
          39
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 26
          },
          "end": {
            "line": 1,
            "column": 39
          }
        }
      },
      "range": [
        0,
        40
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 40
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Subject",
            "range": [
              50,
              57
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Subject",
            "range": [
              50,
              57
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "range": [
            50,
            57
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Subject",
        "raw": "'../Subject'",
        "range": [
          65,
          77
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 24
          },
          "end": {
            "line": 2,
            "column": 36
          }
        }
      },
      "range": [
        41,
        78
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 37
        }
      }
    },
    {
      "type": "FunctionDeclaration",
      "id": {
        "type": "Identifier",
        "name": "shareSubjectFactory",
        "range": [
          88,
          107
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 9
          },
          "end": {
            "line": 3,
            "column": 28
          }
        }
      },
      "params": [],
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ReturnStatement",
            "argument": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "Subject",
                "range": [
                  127,
                  134
                ],
                "loc": {
                  "start": {
                    "line": 4,
                    "column": 15
                  },
                  "end": {
                    "line": 4,
                    "column": 22
                  }
                }
              },
              "arguments": [],
              "range": [
                123,
                136
              ],
              "loc": {
                "start": {
                  "line": 4,
                  "column": 11
                },
                "end": {
                  "line": 4,
                  "column": 24
                }
              }
            },
            "range": [
              116,
              137
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          }
        ],
        "range": [
          110,
          139
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 31
          },
          "end": {
            "line": 5,
            "column": 1
          }
        }
      },
      "generator": false,
      "expression": false,
      "range": [
        79,
        139
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 1
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * 返回一个新的 Observable，该 Observable 多播(共享)源 Observable。 至少要有一个订阅者，该 Observable 才会被订阅并发出数据。\n * 当所有的订阅者都取消订阅了，它会取消对源 Observable 的订阅。 因为 Observable 是多路传播的它使得流是 `hot`。\n * 它是 ｀.publish().refCount()｀ 的别名。\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n * @return {Observable<T>} Observable，连接该 Observable 后会导致源 Observable 向它的观察者发送数据。\n * @method share\n * @owner Observable\n ",
          "range": [
            140,
            511
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "share",
          "range": [
            528,
            533
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 16
            },
            "end": {
              "line": 16,
              "column": 21
            }
          }
        },
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "multicast",
                        "range": [
                          549,
                          558
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 11
                          },
                          "end": {
                            "line": 17,
                            "column": 20
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call",
                        "range": [
                          559,
                          563
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 21
                          },
                          "end": {
                            "line": 17,
                            "column": 25
                          }
                        }
                      },
                      "range": [
                        549,
                        563
                      ],
                      "loc": {
                        "start": {
                          "line": 17,
                          "column": 11
                        },
                        "end": {
                          "line": 17,
                          "column": 25
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          564,
                          568
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 26
                          },
                          "end": {
                            "line": 17,
                            "column": 30
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "shareSubjectFactory",
                        "range": [
                          570,
                          589
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 32
                          },
                          "end": {
                            "line": 17,
                            "column": 51
                          }
                        }
                      }
                    ],
                    "range": [
                      549,
                      590
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 11
                      },
                      "end": {
                        "line": 17,
                        "column": 52
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "refCount",
                    "range": [
                      591,
                      599
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 53
                      },
                      "end": {
                        "line": 17,
                        "column": 61
                      }
                    }
                  },
                  "range": [
                    549,
                    599
                  ],
                  "loc": {
                    "start": {
                      "line": 17,
                      "column": 11
                    },
                    "end": {
                      "line": 17,
                      "column": 61
                    }
                  }
                },
                "arguments": [],
                "range": [
                  549,
                  601
                ],
                "loc": {
                  "start": {
                    "line": 17,
                    "column": 11
                  },
                  "end": {
                    "line": 17,
                    "column": 63
                  }
                }
              },
              "range": [
                542,
                602
              ],
              "loc": {
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 64
                }
              }
            }
          ],
          "range": [
            536,
            604
          ],
          "loc": {
            "start": {
              "line": 16,
              "column": 24
            },
            "end": {
              "line": 18,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          519,
          604
        ],
        "loc": {
          "start": {
            "line": 16,
            "column": 7
          },
          "end": {
            "line": 18,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * 返回一个新的 Observable，该 Observable 多播(共享)源 Observable。 至少要有一个订阅者，该 Observable 才会被订阅并发出数据。\n * 当所有的订阅者都取消订阅了，它会取消对源 Observable 的订阅。 因为 Observable 是多路传播的它使得流是 `hot`。\n * 它是 ｀.publish().refCount()｀ 的别名。\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n * @return {Observable<T>} Observable，连接该 Observable 后会导致源 Observable 向它的观察者发送数据。\n * @method share\n * @owner Observable\n ",
            "range": [
              140,
              511
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 15,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "specifiers": [],
      "source": null,
      "range": [
        512,
        604
      ],
      "loc": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 18,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * 返回一个新的 Observable，该 Observable 多播(共享)源 Observable。 至少要有一个订阅者，该 Observable 才会被订阅并发出数据。\n * 当所有的订阅者都取消订阅了，它会取消对源 Observable 的订阅。 因为 Observable 是多路传播的它使得流是 `hot`。\n * 它是 ｀.publish().refCount()｀ 的别名。\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n * @return {Observable<T>} Observable，连接该 Observable 后会导致源 Observable 向它的观察者发送数据。\n * @method share\n * @owner Observable\n ",
          "range": [
            140,
            511
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "EmptyStatement",
      "range": [
        605,
        606
      ],
      "loc": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 19,
          "column": 1
        }
      },
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=share.js.map",
          "range": [
            607,
            640
          ],
          "loc": {
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    606
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 19,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * 返回一个新的 Observable，该 Observable 多播(共享)源 Observable。 至少要有一个订阅者，该 Observable 才会被订阅并发出数据。\n * 当所有的订阅者都取消订阅了，它会取消对源 Observable 的订阅。 因为 Observable 是多路传播的它使得流是 `hot`。\n * 它是 ｀.publish().refCount()｀ 的别名。\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n * @return {Observable<T>} Observable，连接该 Observable 后会导致源 Observable 向它的观察者发送数据。\n * @method share\n * @owner Observable\n ",
      "range": [
        140,
        511
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=share.js.map",
      "range": [
        607,
        640
      ],
      "loc": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 33
        }
      }
    }
  ]
}