{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeMapOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeMapOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "range": [
            9,
            25
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeMap",
        "raw": "'./mergeMap'",
        "range": [
          33,
          45
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 33
          },
          "end": {
            "line": 1,
            "column": 45
          }
        }
      },
      "range": [
        0,
        46
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            47,
            82
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 将源值投射为一个合并到输出 Observable 的 Observable,以串行的方式等待前一个完成再合并下一个\n * Observable。\n *\n * <span class=\"informal\">将每个值映射为 Observable, 然后使用{@link concatAll}将所有的\n * 内部 Observables 打平。</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * 返回一个 Observable，该 Observable 发出基于对源 Observable 发出的值调用提供的函数,\n * 该函数返回所谓的内部 Observable。 每个新的内部 Observable 和前一个内部 Observable 连接在一起。\n *\n * 警告: 如果源值不断的到达并且速度快于内部 Observables 完成的速度, 它会导致内存问题，\n * 因为内部的 Observable 在无限制的缓冲区中聚集，以等待轮流订阅。\n *\n * Note: ｀concatMap｀ 等价于 ｀concurrency｀ 参数(最大并发数)为1的 ｀mergeMap｀ 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project\n * 用在源Observable发出的每个值上,返回Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * 函数，它用于产生基于值的输出 Observable 和源(外部)发送和内部 Observable 发送的索引。\n * 传递给这个函数参数有：\n * - `outerValue`: 来自源的值\n * - `innerValue`: 来自投射的 Observable 的值\n * - `outerIndex`: 来自源的值的 \"index\"\n * - `innerIndex`: 来自投射的 Observable 的值的 \"index\"\n * @return {Observable} Observable，发出对源Observable发出的每个值使用投射函数\n * (和可选的`resultSelector`)的结果并且顺序的取出每个投射过的内部Observable的值.\n * @method concatMap\n * @owner Observable\n ",
          "range": [
            83,
            1776
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatMap",
          "range": [
            1793,
            1802
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 16
            },
            "end": {
              "line": 51,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "project",
            "range": [
              1803,
              1810
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 26
              },
              "end": {
                "line": 51,
                "column": 33
              }
            }
          },
          {
            "type": "Identifier",
            "name": "resultSelector",
            "range": [
              1812,
              1826
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 35
              },
              "end": {
                "line": 51,
                "column": 49
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      1841,
                      1845
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 11
                      },
                      "end": {
                        "line": 52,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1846,
                      1850
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 16
                      },
                      "end": {
                        "line": 52,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    1841,
                    1850
                  ],
                  "loc": {
                    "start": {
                      "line": 52,
                      "column": 11
                    },
                    "end": {
                      "line": 52,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeMapOperator",
                      "range": [
                        1855,
                        1871
                      ],
                      "loc": {
                        "start": {
                          "line": 52,
                          "column": 25
                        },
                        "end": {
                          "line": 52,
                          "column": 41
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          1872,
                          1879
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 42
                          },
                          "end": {
                            "line": 52,
                            "column": 49
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "resultSelector",
                        "range": [
                          1881,
                          1895
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 51
                          },
                          "end": {
                            "line": 52,
                            "column": 65
                          }
                        }
                      },
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          1897,
                          1898
                        ],
                        "loc": {
                          "start": {
                            "line": 52,
                            "column": 67
                          },
                          "end": {
                            "line": 52,
                            "column": 68
                          }
                        }
                      }
                    ],
                    "range": [
                      1851,
                      1899
                    ],
                    "loc": {
                      "start": {
                        "line": 52,
                        "column": 21
                      },
                      "end": {
                        "line": 52,
                        "column": 69
                      }
                    }
                  }
                ],
                "range": [
                  1841,
                  1900
                ],
                "loc": {
                  "start": {
                    "line": 52,
                    "column": 11
                  },
                  "end": {
                    "line": 52,
                    "column": 70
                  }
                }
              },
              "range": [
                1834,
                1901
              ],
              "loc": {
                "start": {
                  "line": 52,
                  "column": 4
                },
                "end": {
                  "line": 52,
                  "column": 71
                }
              }
            }
          ],
          "range": [
            1828,
            1903
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 51
            },
            "end": {
              "line": 53,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1784,
          1903
        ],
        "loc": {
          "start": {
            "line": 51,
            "column": 7
          },
          "end": {
            "line": 53,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              47,
              82
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 将源值投射为一个合并到输出 Observable 的 Observable,以串行的方式等待前一个完成再合并下一个\n * Observable。\n *\n * <span class=\"informal\">将每个值映射为 Observable, 然后使用{@link concatAll}将所有的\n * 内部 Observables 打平。</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * 返回一个 Observable，该 Observable 发出基于对源 Observable 发出的值调用提供的函数,\n * 该函数返回所谓的内部 Observable。 每个新的内部 Observable 和前一个内部 Observable 连接在一起。\n *\n * 警告: 如果源值不断的到达并且速度快于内部 Observables 完成的速度, 它会导致内存问题，\n * 因为内部的 Observable 在无限制的缓冲区中聚集，以等待轮流订阅。\n *\n * Note: ｀concatMap｀ 等价于 ｀concurrency｀ 参数(最大并发数)为1的 ｀mergeMap｀ 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project\n * 用在源Observable发出的每个值上,返回Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * 函数，它用于产生基于值的输出 Observable 和源(外部)发送和内部 Observable 发送的索引。\n * 传递给这个函数参数有：\n * - `outerValue`: 来自源的值\n * - `innerValue`: 来自投射的 Observable 的值\n * - `outerIndex`: 来自源的值的 \"index\"\n * - `innerIndex`: 来自投射的 Observable 的值的 \"index\"\n * @return {Observable} Observable，发出对源Observable发出的每个值使用投射函数\n * (和可选的`resultSelector`)的结果并且顺序的取出每个投射过的内部Observable的值.\n * @method concatMap\n * @owner Observable\n ",
            "range": [
              83,
              1776
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 50,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concatMap.js.map",
            "range": [
              1904,
              1941
            ],
            "loc": {
              "start": {
                "line": 54,
                "column": 0
              },
              "end": {
                "line": 54,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1777,
        1903
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 53,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            47,
            82
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 将源值投射为一个合并到输出 Observable 的 Observable,以串行的方式等待前一个完成再合并下一个\n * Observable。\n *\n * <span class=\"informal\">将每个值映射为 Observable, 然后使用{@link concatAll}将所有的\n * 内部 Observables 打平。</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * 返回一个 Observable，该 Observable 发出基于对源 Observable 发出的值调用提供的函数,\n * 该函数返回所谓的内部 Observable。 每个新的内部 Observable 和前一个内部 Observable 连接在一起。\n *\n * 警告: 如果源值不断的到达并且速度快于内部 Observables 完成的速度, 它会导致内存问题，\n * 因为内部的 Observable 在无限制的缓冲区中聚集，以等待轮流订阅。\n *\n * Note: ｀concatMap｀ 等价于 ｀concurrency｀ 参数(最大并发数)为1的 ｀mergeMap｀ 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project\n * 用在源Observable发出的每个值上,返回Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * 函数，它用于产生基于值的输出 Observable 和源(外部)发送和内部 Observable 发送的索引。\n * 传递给这个函数参数有：\n * - `outerValue`: 来自源的值\n * - `innerValue`: 来自投射的 Observable 的值\n * - `outerIndex`: 来自源的值的 \"index\"\n * - `innerIndex`: 来自投射的 Observable 的值的 \"index\"\n * @return {Observable} Observable，发出对源Observable发出的每个值使用投射函数\n * (和可选的`resultSelector`)的结果并且顺序的取出每个投射过的内部Observable的值.\n * @method concatMap\n * @owner Observable\n ",
          "range": [
            83,
            1776
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concatMap.js.map",
          "range": [
            1904,
            1941
          ],
          "loc": {
            "start": {
              "line": 54,
              "column": 0
            },
            "end": {
              "line": 54,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1903
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 53,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        47,
        82
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 将源值投射为一个合并到输出 Observable 的 Observable,以串行的方式等待前一个完成再合并下一个\n * Observable。\n *\n * <span class=\"informal\">将每个值映射为 Observable, 然后使用{@link concatAll}将所有的\n * 内部 Observables 打平。</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * 返回一个 Observable，该 Observable 发出基于对源 Observable 发出的值调用提供的函数,\n * 该函数返回所谓的内部 Observable。 每个新的内部 Observable 和前一个内部 Observable 连接在一起。\n *\n * 警告: 如果源值不断的到达并且速度快于内部 Observables 完成的速度, 它会导致内存问题，\n * 因为内部的 Observable 在无限制的缓冲区中聚集，以等待轮流订阅。\n *\n * Note: ｀concatMap｀ 等价于 ｀concurrency｀ 参数(最大并发数)为1的 ｀mergeMap｀ 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project\n * 用在源Observable发出的每个值上,返回Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * 函数，它用于产生基于值的输出 Observable 和源(外部)发送和内部 Observable 发送的索引。\n * 传递给这个函数参数有：\n * - `outerValue`: 来自源的值\n * - `innerValue`: 来自投射的 Observable 的值\n * - `outerIndex`: 来自源的值的 \"index\"\n * - `innerIndex`: 来自投射的 Observable 的值的 \"index\"\n * @return {Observable} Observable，发出对源Observable发出的每个值使用投射函数\n * (和可选的`resultSelector`)的结果并且顺序的取出每个投射过的内部Observable的值.\n * @method concatMap\n * @owner Observable\n ",
      "range": [
        83,
        1776
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concatMap.js.map",
      "range": [
        1904,
        1941
      ],
      "loc": {
        "start": {
          "line": 54,
          "column": 0
        },
        "end": {
          "line": 54,
          "column": 37
        }
      }
    }
  ]
}