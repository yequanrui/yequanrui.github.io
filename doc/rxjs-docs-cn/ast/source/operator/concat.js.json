{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "Observable",
            "range": [
              9,
              19
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 19
              }
            }
          },
          "range": [
            9,
            19
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 19
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../Observable",
        "raw": "'../Observable'",
        "range": [
          27,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 27
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              53,
              64
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              53,
              64
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 20
              }
            }
          },
          "range": [
            53,
            64
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          72,
          93
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 28
          },
          "end": {
            "line": 2,
            "column": 49
          }
        }
      },
      "range": [
        44,
        94
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              104,
              119
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              104,
              119
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "range": [
            104,
            119
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observable/ArrayObservable",
        "raw": "'../observable/ArrayObservable'",
        "range": [
          127,
          158
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 32
          },
          "end": {
            "line": 3,
            "column": 63
          }
        }
      },
      "range": [
        95,
        159
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 64
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              169,
              185
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              169,
              185
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 25
              }
            }
          },
          "range": [
            169,
            185
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          193,
          205
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 33
          },
          "end": {
            "line": 4,
            "column": 45
          }
        }
      },
      "range": [
        160,
        206
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过顺序地发出多个 Observables 的值将它们连接起来，一个接一个的。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * 通过依次订阅输入Observable将输出Observable加入多个输入Observable，从源头开始，\n * 合并它们的值给输出Observable. 只有前一个Observable结束才会进行下一个Observable。\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>连接3个Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other 等待被连接的 Observable。 可以接受多个输入 Observable。\n * @param {Scheduler} [scheduler=null] 可选的调度器，控制每个输入 Observable 的订阅。\n * @return {Observable} 顺序的、串行的将所有输入 Observable 的值合并给输出 Observable。\n * @method concat\n * @owner Observable\n ",
          "range": [
            243,
            1749
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concat",
          "range": [
            1766,
            1772
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 16
            },
            "end": {
              "line": 48,
              "column": 22
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                1776,
                1787
              ],
              "loc": {
                "start": {
                  "line": 48,
                  "column": 26
                },
                "end": {
                  "line": 48,
                  "column": 37
                }
              }
            },
            "range": [
              1773,
              1787
            ],
            "loc": {
              "start": {
                "line": 48,
                "column": 23
              },
              "end": {
                "line": 48,
                "column": 37
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "ThisExpression",
                      "range": [
                        1802,
                        1806
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 11
                        },
                        "end": {
                          "line": 49,
                          "column": 15
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "lift",
                      "range": [
                        1807,
                        1811
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 16
                        },
                        "end": {
                          "line": 49,
                          "column": 20
                        }
                      }
                    },
                    "range": [
                      1802,
                      1811
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 11
                      },
                      "end": {
                        "line": 49,
                        "column": 20
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "call",
                    "range": [
                      1812,
                      1816
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 21
                      },
                      "end": {
                        "line": 49,
                        "column": 25
                      }
                    }
                  },
                  "range": [
                    1802,
                    1816
                  ],
                  "loc": {
                    "start": {
                      "line": 49,
                      "column": 11
                    },
                    "end": {
                      "line": 49,
                      "column": 25
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "concatStatic",
                      "range": [
                        1817,
                        1829
                      ],
                      "loc": {
                        "start": {
                          "line": 49,
                          "column": 26
                        },
                        "end": {
                          "line": 49,
                          "column": 38
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          1830,
                          1834
                        ],
                        "loc": {
                          "start": {
                            "line": 49,
                            "column": 39
                          },
                          "end": {
                            "line": 49,
                            "column": 43
                          }
                        }
                      },
                      {
                        "type": "SpreadElement",
                        "argument": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            1839,
                            1850
                          ],
                          "loc": {
                            "start": {
                              "line": 49,
                              "column": 48
                            },
                            "end": {
                              "line": 49,
                              "column": 59
                            }
                          }
                        },
                        "range": [
                          1836,
                          1850
                        ],
                        "loc": {
                          "start": {
                            "line": 49,
                            "column": 45
                          },
                          "end": {
                            "line": 49,
                            "column": 59
                          }
                        }
                      }
                    ],
                    "range": [
                      1817,
                      1851
                    ],
                    "loc": {
                      "start": {
                        "line": 49,
                        "column": 26
                      },
                      "end": {
                        "line": 49,
                        "column": 60
                      }
                    }
                  }
                ],
                "range": [
                  1802,
                  1852
                ],
                "loc": {
                  "start": {
                    "line": 49,
                    "column": 11
                  },
                  "end": {
                    "line": 49,
                    "column": 61
                  }
                }
              },
              "range": [
                1795,
                1853
              ],
              "loc": {
                "start": {
                  "line": 49,
                  "column": 4
                },
                "end": {
                  "line": 49,
                  "column": 62
                }
              }
            }
          ],
          "range": [
            1789,
            1855
          ],
          "loc": {
            "start": {
              "line": 48,
              "column": 39
            },
            "end": {
              "line": 50,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1757,
          1855
        ],
        "loc": {
          "start": {
            "line": 48,
            "column": 7
          },
          "end": {
            "line": 50,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              207,
              242
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过顺序地发出多个 Observables 的值将它们连接起来，一个接一个的。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * 通过依次订阅输入Observable将输出Observable加入多个输入Observable，从源头开始，\n * 合并它们的值给输出Observable. 只有前一个Observable结束才会进行下一个Observable。\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>连接3个Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other 等待被连接的 Observable。 可以接受多个输入 Observable。\n * @param {Scheduler} [scheduler=null] 可选的调度器，控制每个输入 Observable 的订阅。\n * @return {Observable} 顺序的、串行的将所有输入 Observable 的值合并给输出 Observable。\n * @method concat\n * @owner Observable\n ",
            "range": [
              243,
              1749
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 47,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              1856,
              1891
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 创建一个输出 Observable，该 Observable 顺序的发出每个输入 Observable 的所有值。\n *\n * <span class=\"informal\">连接多个输入 Observable，顺序的发出它们的值，一个\n * Observable 接一个 Observable。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat`通过一次订阅一个将多个 Observables 连接起来，并将值合并到输出 Observable 中。\n * 你可以传递一个输入 Observable 数组，或者直接把它们当做参数传递。 传递一个空数组会\n * 导致输出 Observable 立马触发完成状态。\n *\n * `concat`会订阅第一个输入 Observable 并且发出它的所有值, 不去做任何干预。 当这个\n * 输入 Observable 完成时， 订阅第二个输入 Observable，同样的发出它的所有值。这个过\n * 程会不断重复直到输入 Observable 都用过了。当最后一个输入 Observable 完成时，`concat`\n * 也会完成。 任何时刻都只会有一个输入 Observable 发出值。 如果你想让所有的输入 Observable\n * 并行发出数据，请查看{@link merge}, 特别的带上`concurrent`参数。 事实上,`concat`和\n * `concurrent`设置为1的`merge`效果是一样的。\n *\n * 注意，如果输入 Observable 一直都不完成, `concat` 也会一直不能完成并且下一个输入 Observable\n * 将永远不能被订阅. 另一方面, 如果某个输入 Observable 在它被订阅后立马处于完成状态, 那么它对\n * `concat`是不可见的, 仅仅会转向下一个输入 Observable.\n *\n * 如果输入 Observable 链中的任一成员发生错误, `concat`会立马触发错误状态，而不去控制下一个输入\n * Observable. 发生错误的输入 Observable 之后的输入 Observable 不会被订阅.\n *\n * 如果你将同一输入 Observable 传递给`concat`多次，结果流会在每次订阅的时候“重复播放”, 这意味着\n * 你可以重复 Observable 多次. 如果你乏味的给`concat`传递同一输入 Observable 1000次,你可以试着\n * 用用{@link repeat}.\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>连接3个 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>连接同一个 Observable 多次</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 等待被连接的输入 Observable。\n * @param {ObservableInput} input2 等待被连接的输入 Observable。\n * 可以传递多个输入Observable.\n * @param {Scheduler} [scheduler=null] 可选的调度器，调度每个 Observable 的订阅。\n * @return {Observable} 有序的、串行的将所有输入 Observable 的值合并到单一的输出 Observable。\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              1892,
              4773
            ],
            "loc": {
              "start": {
                "line": 52,
                "column": 0
              },
              "end": {
                "line": 135,
                "column": 3
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1750,
        1855
      ],
      "loc": {
        "start": {
          "line": 48,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            207,
            242
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过顺序地发出多个 Observables 的值将它们连接起来，一个接一个的。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * 通过依次订阅输入Observable将输出Observable加入多个输入Observable，从源头开始，\n * 合并它们的值给输出Observable. 只有前一个Observable结束才会进行下一个Observable。\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>连接3个Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other 等待被连接的 Observable。 可以接受多个输入 Observable。\n * @param {Scheduler} [scheduler=null] 可选的调度器，控制每个输入 Observable 的订阅。\n * @return {Observable} 顺序的、串行的将所有输入 Observable 的值合并给输出 Observable。\n * @method concat\n * @owner Observable\n ",
          "range": [
            243,
            1749
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 47,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            1856,
            1891
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable，该 Observable 顺序的发出每个输入 Observable 的所有值。\n *\n * <span class=\"informal\">连接多个输入 Observable，顺序的发出它们的值，一个\n * Observable 接一个 Observable。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat`通过一次订阅一个将多个 Observables 连接起来，并将值合并到输出 Observable 中。\n * 你可以传递一个输入 Observable 数组，或者直接把它们当做参数传递。 传递一个空数组会\n * 导致输出 Observable 立马触发完成状态。\n *\n * `concat`会订阅第一个输入 Observable 并且发出它的所有值, 不去做任何干预。 当这个\n * 输入 Observable 完成时， 订阅第二个输入 Observable，同样的发出它的所有值。这个过\n * 程会不断重复直到输入 Observable 都用过了。当最后一个输入 Observable 完成时，`concat`\n * 也会完成。 任何时刻都只会有一个输入 Observable 发出值。 如果你想让所有的输入 Observable\n * 并行发出数据，请查看{@link merge}, 特别的带上`concurrent`参数。 事实上,`concat`和\n * `concurrent`设置为1的`merge`效果是一样的。\n *\n * 注意，如果输入 Observable 一直都不完成, `concat` 也会一直不能完成并且下一个输入 Observable\n * 将永远不能被订阅. 另一方面, 如果某个输入 Observable 在它被订阅后立马处于完成状态, 那么它对\n * `concat`是不可见的, 仅仅会转向下一个输入 Observable.\n *\n * 如果输入 Observable 链中的任一成员发生错误, `concat`会立马触发错误状态，而不去控制下一个输入\n * Observable. 发生错误的输入 Observable 之后的输入 Observable 不会被订阅.\n *\n * 如果你将同一输入 Observable 传递给`concat`多次，结果流会在每次订阅的时候“重复播放”, 这意味着\n * 你可以重复 Observable 多次. 如果你乏味的给`concat`传递同一输入 Observable 1000次,你可以试着\n * 用用{@link repeat}.\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>连接3个 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>连接同一个 Observable 多次</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 等待被连接的输入 Observable。\n * @param {ObservableInput} input2 等待被连接的输入 Observable。\n * 可以传递多个输入Observable.\n * @param {Scheduler} [scheduler=null] 可选的调度器，调度每个 Observable 的订阅。\n * @return {Observable} 有序的、串行的将所有输入 Observable 的值合并到单一的输出 Observable。\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            1892,
            4773
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 135,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatStatic",
          "range": [
            4790,
            4802
          ],
          "loc": {
            "start": {
              "line": 136,
              "column": 16
            },
            "end": {
              "line": 136,
              "column": 28
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                4806,
                4817
              ],
              "loc": {
                "start": {
                  "line": 136,
                  "column": 32
                },
                "end": {
                  "line": 136,
                  "column": 43
                }
              }
            },
            "range": [
              4803,
              4817
            ],
            "loc": {
              "start": {
                "line": 136,
                "column": 29
              },
              "end": {
                "line": 136,
                "column": 43
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      4829,
                      4838
                    ],
                    "loc": {
                      "start": {
                        "line": 137,
                        "column": 8
                      },
                      "end": {
                        "line": 137,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      4841,
                      4845
                    ],
                    "loc": {
                      "start": {
                        "line": 137,
                        "column": 20
                      },
                      "end": {
                        "line": 137,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    4829,
                    4845
                  ],
                  "loc": {
                    "start": {
                      "line": 137,
                      "column": 8
                    },
                    "end": {
                      "line": 137,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4825,
                4846
              ],
              "loc": {
                "start": {
                  "line": 137,
                  "column": 4
                },
                "end": {
                  "line": 137,
                  "column": 25
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "args",
                    "range": [
                      4855,
                      4859
                    ],
                    "loc": {
                      "start": {
                        "line": 138,
                        "column": 8
                      },
                      "end": {
                        "line": 138,
                        "column": 12
                      }
                    }
                  },
                  "init": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      4862,
                      4873
                    ],
                    "loc": {
                      "start": {
                        "line": 138,
                        "column": 15
                      },
                      "end": {
                        "line": 138,
                        "column": 26
                      }
                    }
                  },
                  "range": [
                    4855,
                    4873
                  ],
                  "loc": {
                    "start": {
                      "line": 138,
                      "column": 8
                    },
                    "end": {
                      "line": 138,
                      "column": 26
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                4851,
                4874
              ],
              "loc": {
                "start": {
                  "line": 138,
                  "column": 4
                },
                "end": {
                  "line": 138,
                  "column": 27
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    4883,
                    4894
                  ],
                  "loc": {
                    "start": {
                      "line": 139,
                      "column": 8
                    },
                    "end": {
                      "line": 139,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "args",
                      "range": [
                        4895,
                        4899
                      ],
                      "loc": {
                        "start": {
                          "line": 139,
                          "column": 20
                        },
                        "end": {
                          "line": 139,
                          "column": 24
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4900,
                            4911
                          ],
                          "loc": {
                            "start": {
                              "line": 139,
                              "column": 25
                            },
                            "end": {
                              "line": 139,
                              "column": 36
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            4912,
                            4918
                          ],
                          "loc": {
                            "start": {
                              "line": 139,
                              "column": 37
                            },
                            "end": {
                              "line": 139,
                              "column": 43
                            }
                          }
                        },
                        "range": [
                          4900,
                          4918
                        ],
                        "loc": {
                          "start": {
                            "line": 139,
                            "column": 25
                          },
                          "end": {
                            "line": 139,
                            "column": 43
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          4921,
                          4922
                        ],
                        "loc": {
                          "start": {
                            "line": 139,
                            "column": 46
                          },
                          "end": {
                            "line": 139,
                            "column": 47
                          }
                        }
                      },
                      "range": [
                        4900,
                        4922
                      ],
                      "loc": {
                        "start": {
                          "line": 139,
                          "column": 25
                        },
                        "end": {
                          "line": 139,
                          "column": 47
                        }
                      }
                    },
                    "range": [
                      4895,
                      4923
                    ],
                    "loc": {
                      "start": {
                        "line": 139,
                        "column": 20
                      },
                      "end": {
                        "line": 139,
                        "column": 48
                      }
                    }
                  }
                ],
                "range": [
                  4883,
                  4924
                ],
                "loc": {
                  "start": {
                    "line": 139,
                    "column": 8
                  },
                  "end": {
                    "line": 139,
                    "column": 49
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4936,
                          4945
                        ],
                        "loc": {
                          "start": {
                            "line": 140,
                            "column": 8
                          },
                          "end": {
                            "line": 140,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "args",
                            "range": [
                              4948,
                              4952
                            ],
                            "loc": {
                              "start": {
                                "line": 140,
                                "column": 20
                              },
                              "end": {
                                "line": 140,
                                "column": 24
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              4953,
                              4956
                            ],
                            "loc": {
                              "start": {
                                "line": 140,
                                "column": 25
                              },
                              "end": {
                                "line": 140,
                                "column": 28
                              }
                            }
                          },
                          "range": [
                            4948,
                            4956
                          ],
                          "loc": {
                            "start": {
                              "line": 140,
                              "column": 20
                            },
                            "end": {
                              "line": 140,
                              "column": 28
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          4948,
                          4958
                        ],
                        "loc": {
                          "start": {
                            "line": 140,
                            "column": 20
                          },
                          "end": {
                            "line": 140,
                            "column": 30
                          }
                        }
                      },
                      "range": [
                        4936,
                        4958
                      ],
                      "loc": {
                        "start": {
                          "line": 140,
                          "column": 8
                        },
                        "end": {
                          "line": 140,
                          "column": 30
                        }
                      }
                    },
                    "range": [
                      4936,
                      4959
                    ],
                    "loc": {
                      "start": {
                        "line": 140,
                        "column": 8
                      },
                      "end": {
                        "line": 140,
                        "column": 31
                      }
                    }
                  }
                ],
                "range": [
                  4926,
                  4965
                ],
                "loc": {
                  "start": {
                    "line": 139,
                    "column": 51
                  },
                  "end": {
                    "line": 141,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4879,
                4965
              ],
              "loc": {
                "start": {
                  "line": 139,
                  "column": 4
                },
                "end": {
                  "line": 141,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Identifier",
                      "name": "scheduler",
                      "range": [
                        4974,
                        4983
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 8
                        },
                        "end": {
                          "line": 142,
                          "column": 17
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": null,
                      "raw": "null",
                      "range": [
                        4988,
                        4992
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 22
                        },
                        "end": {
                          "line": 142,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      4974,
                      4992
                    ],
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 8
                      },
                      "end": {
                        "line": 142,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4996,
                          5007
                        ],
                        "loc": {
                          "start": {
                            "line": 142,
                            "column": 30
                          },
                          "end": {
                            "line": 142,
                            "column": 41
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "length",
                        "range": [
                          5008,
                          5014
                        ],
                        "loc": {
                          "start": {
                            "line": 142,
                            "column": 42
                          },
                          "end": {
                            "line": 142,
                            "column": 48
                          }
                        }
                      },
                      "range": [
                        4996,
                        5014
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 30
                        },
                        "end": {
                          "line": 142,
                          "column": 48
                        }
                      }
                    },
                    "right": {
                      "type": "Literal",
                      "value": 1,
                      "raw": "1",
                      "range": [
                        5019,
                        5020
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 53
                        },
                        "end": {
                          "line": 142,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      4996,
                      5020
                    ],
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 30
                      },
                      "end": {
                        "line": 142,
                        "column": 54
                      }
                    }
                  },
                  "range": [
                    4974,
                    5020
                  ],
                  "loc": {
                    "start": {
                      "line": 142,
                      "column": 8
                    },
                    "end": {
                      "line": 142,
                      "column": 54
                    }
                  }
                },
                "right": {
                  "type": "BinaryExpression",
                  "operator": "instanceof",
                  "left": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        5024,
                        5035
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 58
                        },
                        "end": {
                          "line": 142,
                          "column": 69
                        }
                      }
                    },
                    "property": {
                      "type": "Literal",
                      "value": 0,
                      "raw": "0",
                      "range": [
                        5036,
                        5037
                      ],
                      "loc": {
                        "start": {
                          "line": 142,
                          "column": 70
                        },
                        "end": {
                          "line": 142,
                          "column": 71
                        }
                      }
                    },
                    "range": [
                      5024,
                      5038
                    ],
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 58
                      },
                      "end": {
                        "line": 142,
                        "column": 72
                      }
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "Observable",
                    "range": [
                      5050,
                      5060
                    ],
                    "loc": {
                      "start": {
                        "line": 142,
                        "column": 84
                      },
                      "end": {
                        "line": 142,
                        "column": 94
                      }
                    }
                  },
                  "range": [
                    5024,
                    5060
                  ],
                  "loc": {
                    "start": {
                      "line": 142,
                      "column": 58
                    },
                    "end": {
                      "line": 142,
                      "column": 94
                    }
                  }
                },
                "range": [
                  4974,
                  5060
                ],
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 8
                  },
                  "end": {
                    "line": 142,
                    "column": 94
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ReturnStatement",
                    "argument": {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          5079,
                          5090
                        ],
                        "loc": {
                          "start": {
                            "line": 143,
                            "column": 15
                          },
                          "end": {
                            "line": 143,
                            "column": 26
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          5091,
                          5092
                        ],
                        "loc": {
                          "start": {
                            "line": 143,
                            "column": 27
                          },
                          "end": {
                            "line": 143,
                            "column": 28
                          }
                        }
                      },
                      "range": [
                        5079,
                        5093
                      ],
                      "loc": {
                        "start": {
                          "line": 143,
                          "column": 15
                        },
                        "end": {
                          "line": 143,
                          "column": 29
                        }
                      }
                    },
                    "range": [
                      5072,
                      5094
                    ],
                    "loc": {
                      "start": {
                        "line": 143,
                        "column": 8
                      },
                      "end": {
                        "line": 143,
                        "column": 30
                      }
                    }
                  }
                ],
                "range": [
                  5062,
                  5100
                ],
                "loc": {
                  "start": {
                    "line": 142,
                    "column": 96
                  },
                  "end": {
                    "line": 144,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                4970,
                5100
              ],
              "loc": {
                "start": {
                  "line": 142,
                  "column": 4
                },
                "end": {
                  "line": 144,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        5116,
                        5131
                      ],
                      "loc": {
                        "start": {
                          "line": 145,
                          "column": 15
                        },
                        "end": {
                          "line": 145,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          5132,
                          5143
                        ],
                        "loc": {
                          "start": {
                            "line": 145,
                            "column": 31
                          },
                          "end": {
                            "line": 145,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          5145,
                          5154
                        ],
                        "loc": {
                          "start": {
                            "line": 145,
                            "column": 44
                          },
                          "end": {
                            "line": 145,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      5112,
                      5155
                    ],
                    "loc": {
                      "start": {
                        "line": 145,
                        "column": 11
                      },
                      "end": {
                        "line": 145,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      5156,
                      5160
                    ],
                    "loc": {
                      "start": {
                        "line": 145,
                        "column": 55
                      },
                      "end": {
                        "line": 145,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    5112,
                    5160
                  ],
                  "loc": {
                    "start": {
                      "line": 145,
                      "column": 11
                    },
                    "end": {
                      "line": 145,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        5165,
                        5181
                      ],
                      "loc": {
                        "start": {
                          "line": 145,
                          "column": 64
                        },
                        "end": {
                          "line": 145,
                          "column": 80
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          5182,
                          5183
                        ],
                        "loc": {
                          "start": {
                            "line": 145,
                            "column": 81
                          },
                          "end": {
                            "line": 145,
                            "column": 82
                          }
                        }
                      }
                    ],
                    "range": [
                      5161,
                      5184
                    ],
                    "loc": {
                      "start": {
                        "line": 145,
                        "column": 60
                      },
                      "end": {
                        "line": 145,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  5112,
                  5185
                ],
                "loc": {
                  "start": {
                    "line": 145,
                    "column": 11
                  },
                  "end": {
                    "line": 145,
                    "column": 84
                  }
                }
              },
              "range": [
                5105,
                5186
              ],
              "loc": {
                "start": {
                  "line": 145,
                  "column": 4
                },
                "end": {
                  "line": 145,
                  "column": 85
                }
              }
            }
          ],
          "range": [
            4819,
            5188
          ],
          "loc": {
            "start": {
              "line": 136,
              "column": 45
            },
            "end": {
              "line": 146,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          4781,
          5188
        ],
        "loc": {
          "start": {
            "line": 136,
            "column": 7
          },
          "end": {
            "line": 146,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              1856,
              1891
            ],
            "loc": {
              "start": {
                "line": 51,
                "column": 0
              },
              "end": {
                "line": 51,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 创建一个输出 Observable，该 Observable 顺序的发出每个输入 Observable 的所有值。\n *\n * <span class=\"informal\">连接多个输入 Observable，顺序的发出它们的值，一个\n * Observable 接一个 Observable。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat`通过一次订阅一个将多个 Observables 连接起来，并将值合并到输出 Observable 中。\n * 你可以传递一个输入 Observable 数组，或者直接把它们当做参数传递。 传递一个空数组会\n * 导致输出 Observable 立马触发完成状态。\n *\n * `concat`会订阅第一个输入 Observable 并且发出它的所有值, 不去做任何干预。 当这个\n * 输入 Observable 完成时， 订阅第二个输入 Observable，同样的发出它的所有值。这个过\n * 程会不断重复直到输入 Observable 都用过了。当最后一个输入 Observable 完成时，`concat`\n * 也会完成。 任何时刻都只会有一个输入 Observable 发出值。 如果你想让所有的输入 Observable\n * 并行发出数据，请查看{@link merge}, 特别的带上`concurrent`参数。 事实上,`concat`和\n * `concurrent`设置为1的`merge`效果是一样的。\n *\n * 注意，如果输入 Observable 一直都不完成, `concat` 也会一直不能完成并且下一个输入 Observable\n * 将永远不能被订阅. 另一方面, 如果某个输入 Observable 在它被订阅后立马处于完成状态, 那么它对\n * `concat`是不可见的, 仅仅会转向下一个输入 Observable.\n *\n * 如果输入 Observable 链中的任一成员发生错误, `concat`会立马触发错误状态，而不去控制下一个输入\n * Observable. 发生错误的输入 Observable 之后的输入 Observable 不会被订阅.\n *\n * 如果你将同一输入 Observable 传递给`concat`多次，结果流会在每次订阅的时候“重复播放”, 这意味着\n * 你可以重复 Observable 多次. 如果你乏味的给`concat`传递同一输入 Observable 1000次,你可以试着\n * 用用{@link repeat}.\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>连接3个 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>连接同一个 Observable 多次</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 等待被连接的输入 Observable。\n * @param {ObservableInput} input2 等待被连接的输入 Observable。\n * 可以传递多个输入Observable.\n * @param {Scheduler} [scheduler=null] 可选的调度器，调度每个 Observable 的订阅。\n * @return {Observable} 有序的、串行的将所有输入 Observable 的值合并到单一的输出 Observable。\n * @static true\n * @name concat\n * @owner Observable\n ",
            "range": [
              1892,
              4773
            ],
            "loc": {
              "start": {
                "line": 52,
                "column": 0
              },
              "end": {
                "line": 135,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concat.js.map",
            "range": [
              5189,
              5223
            ],
            "loc": {
              "start": {
                "line": 147,
                "column": 0
              },
              "end": {
                "line": 147,
                "column": 34
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        4774,
        5188
      ],
      "loc": {
        "start": {
          "line": 136,
          "column": 0
        },
        "end": {
          "line": 146,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            1856,
            1891
          ],
          "loc": {
            "start": {
              "line": 51,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 创建一个输出 Observable，该 Observable 顺序的发出每个输入 Observable 的所有值。\n *\n * <span class=\"informal\">连接多个输入 Observable，顺序的发出它们的值，一个\n * Observable 接一个 Observable。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat`通过一次订阅一个将多个 Observables 连接起来，并将值合并到输出 Observable 中。\n * 你可以传递一个输入 Observable 数组，或者直接把它们当做参数传递。 传递一个空数组会\n * 导致输出 Observable 立马触发完成状态。\n *\n * `concat`会订阅第一个输入 Observable 并且发出它的所有值, 不去做任何干预。 当这个\n * 输入 Observable 完成时， 订阅第二个输入 Observable，同样的发出它的所有值。这个过\n * 程会不断重复直到输入 Observable 都用过了。当最后一个输入 Observable 完成时，`concat`\n * 也会完成。 任何时刻都只会有一个输入 Observable 发出值。 如果你想让所有的输入 Observable\n * 并行发出数据，请查看{@link merge}, 特别的带上`concurrent`参数。 事实上,`concat`和\n * `concurrent`设置为1的`merge`效果是一样的。\n *\n * 注意，如果输入 Observable 一直都不完成, `concat` 也会一直不能完成并且下一个输入 Observable\n * 将永远不能被订阅. 另一方面, 如果某个输入 Observable 在它被订阅后立马处于完成状态, 那么它对\n * `concat`是不可见的, 仅仅会转向下一个输入 Observable.\n *\n * 如果输入 Observable 链中的任一成员发生错误, `concat`会立马触发错误状态，而不去控制下一个输入\n * Observable. 发生错误的输入 Observable 之后的输入 Observable 不会被订阅.\n *\n * 如果你将同一输入 Observable 传递给`concat`多次，结果流会在每次订阅的时候“重复播放”, 这意味着\n * 你可以重复 Observable 多次. 如果你乏味的给`concat`传递同一输入 Observable 1000次,你可以试着\n * 用用{@link repeat}.\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>连接3个 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>连接同一个 Observable 多次</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 等待被连接的输入 Observable。\n * @param {ObservableInput} input2 等待被连接的输入 Observable。\n * 可以传递多个输入Observable.\n * @param {Scheduler} [scheduler=null] 可选的调度器，调度每个 Observable 的订阅。\n * @return {Observable} 有序的、串行的将所有输入 Observable 的值合并到单一的输出 Observable。\n * @static true\n * @name concat\n * @owner Observable\n ",
          "range": [
            1892,
            4773
          ],
          "loc": {
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 135,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concat.js.map",
          "range": [
            5189,
            5223
          ],
          "loc": {
            "start": {
              "line": 147,
              "column": 0
            },
            "end": {
              "line": 147,
              "column": 34
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    5188
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 146,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        207,
        242
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 创建一个输出 Observable，它在当前 Observable 之后顺序地发出每个给定的输入 Observable 中的所有值。\n *\n * <span class=\"informal\">通过顺序地发出多个 Observables 的值将它们连接起来，一个接一个的。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * 通过依次订阅输入Observable将输出Observable加入多个输入Observable，从源头开始，\n * 合并它们的值给输出Observable. 只有前一个Observable结束才会进行下一个Observable。\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>连接3个Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other 等待被连接的 Observable。 可以接受多个输入 Observable。\n * @param {Scheduler} [scheduler=null] 可选的调度器，控制每个输入 Observable 的订阅。\n * @return {Observable} 顺序的、串行的将所有输入 Observable 的值合并给输出 Observable。\n * @method concat\n * @owner Observable\n ",
      "range": [
        243,
        1749
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 47,
          "column": 3
        }
      }
    },
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        1856,
        1891
      ],
      "loc": {
        "start": {
          "line": 51,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 创建一个输出 Observable，该 Observable 顺序的发出每个输入 Observable 的所有值。\n *\n * <span class=\"informal\">连接多个输入 Observable，顺序的发出它们的值，一个\n * Observable 接一个 Observable。</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat`通过一次订阅一个将多个 Observables 连接起来，并将值合并到输出 Observable 中。\n * 你可以传递一个输入 Observable 数组，或者直接把它们当做参数传递。 传递一个空数组会\n * 导致输出 Observable 立马触发完成状态。\n *\n * `concat`会订阅第一个输入 Observable 并且发出它的所有值, 不去做任何干预。 当这个\n * 输入 Observable 完成时， 订阅第二个输入 Observable，同样的发出它的所有值。这个过\n * 程会不断重复直到输入 Observable 都用过了。当最后一个输入 Observable 完成时，`concat`\n * 也会完成。 任何时刻都只会有一个输入 Observable 发出值。 如果你想让所有的输入 Observable\n * 并行发出数据，请查看{@link merge}, 特别的带上`concurrent`参数。 事实上,`concat`和\n * `concurrent`设置为1的`merge`效果是一样的。\n *\n * 注意，如果输入 Observable 一直都不完成, `concat` 也会一直不能完成并且下一个输入 Observable\n * 将永远不能被订阅. 另一方面, 如果某个输入 Observable 在它被订阅后立马处于完成状态, 那么它对\n * `concat`是不可见的, 仅仅会转向下一个输入 Observable.\n *\n * 如果输入 Observable 链中的任一成员发生错误, `concat`会立马触发错误状态，而不去控制下一个输入\n * Observable. 发生错误的输入 Observable 之后的输入 Observable 不会被订阅.\n *\n * 如果你将同一输入 Observable 传递给`concat`多次，结果流会在每次订阅的时候“重复播放”, 这意味着\n * 你可以重复 Observable 多次. 如果你乏味的给`concat`传递同一输入 Observable 1000次,你可以试着\n * 用用{@link repeat}.\n *\n * @example <caption>将从0数到3的定时器和从1到10的同步序列进行连接</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>连接3个 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>连接同一个 Observable 多次</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 等待被连接的输入 Observable。\n * @param {ObservableInput} input2 等待被连接的输入 Observable。\n * 可以传递多个输入Observable.\n * @param {Scheduler} [scheduler=null] 可选的调度器，调度每个 Observable 的订阅。\n * @return {Observable} 有序的、串行的将所有输入 Observable 的值合并到单一的输出 Observable。\n * @static true\n * @name concat\n * @owner Observable\n ",
      "range": [
        1892,
        4773
      ],
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 135,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concat.js.map",
      "range": [
        5189,
        5223
      ],
      "loc": {
        "start": {
          "line": 147,
          "column": 0
        },
        "end": {
          "line": 147,
          "column": 34
        }
      }
    }
  ]
}