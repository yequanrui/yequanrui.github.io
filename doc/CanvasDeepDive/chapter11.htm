<!-- saved from url=(0061)./chapter11.htm -->
<html class="translated-ltr">

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <link rel="stylesheet" href="./style/master.css">
    <script type="text/javascript" async="" src="./style/ga.js"></script>
    <script src="./style/jquery.js"></script>
    <style type="text/css"></style>
    <script src="./style/setup.js"></script>
    <script src="./style/jangle.js"></script>
    <style id="style-1-cropbar-clipper">
    /* Copyright 2014 Evernote Corporation. All rights reserved. */
    
    .en-markup-crop-options {
        top: 18px !important;
        left: 50% !important;
        margin-left: -100px !important;
        width: 200px !important;
        border: 2px rgba(255, 255, 255, .38) solid !important;
        border-radius: 4px !important;
    }
    
    .en-markup-crop-options div div:first-of-type {
        margin-left: 0px !important;
    }
    </style>
    <link type="text/css" rel="stylesheet" charset="UTF-8" href="./style/translateelement.css">
</head>

<body>
    <div class="chapnav top">
        <a class="prevchap" href="./chapter10.htm">
            <font>
                <font>上一个</font>
            </font>
        </a>
        <a class="toclink" href="./index.htm">
            <font>
                <font>目录</font>
            </font>
        </a>
        <a class="nextchap" href="./chapter12.htm">
            <font>
                <font>下一个</font>
            </font>
        </a>
    </div>
    <div id="header">
        <h2><font><font>第11章</font></font></h2>
        <h1><font><font>WebGL的手在与ThreeJS：3D汽车</font></font></h1>
    </div>
    <div id="content">
        <h3><a id="cube"><font><font>A栋天</font></font></a></h3>
        <p>
            <font>
                <font>对于我们的手，我们将创建一个新的场景：一辆汽车，一个星空下推动在一个大草地周围。</font>
                <font>这是从一系列由杰罗姆，谁也创造了模板建设者和TQuery的，这是像jQuery伟大的博客文章改编，但ThreeJS。</font>
                <font>（</font>
            </font>
            <a href="http://learningthreejs.com/blog/2012/05/21/sport-car-in-webgl/">
                <font>
                    <font>原创系列</font>
                </font>
            </a>
            <font>
                <font>。）</font>
            </font>
        </p>
        <p>
            <font>
                <font>开始从一个新的模板，</font>
            </font>
            <a href="http://jeromeetienne.github.com/threejsboilerplatebuilder/">
                <font>
                    <font>模板生成器</font>
                </font>
            </a>
            <font>
                <font>。</font>
                <font>现在，让我们添加一个天空。</font>
                <font>最简单的方法，使天空只是把天空的照片上了一个大立方体的两侧。</font>
                <font>诀窍是，我们将会把世界各地的</font>
            </font><i><font><font>内部</font></font></i>
            <font>
                <font>立方体。</font>
                <font>我们将通过图片加载成一个立方体贴图是这样开始：</font>
            </font>
        </p>
        <pre><code><span><font><font>//添加星空图</font></font></span><span><font><font>//负载的天空图像</font></font></span><span><font><font>VAR的URL = </font></font></span><span><font></font></span><span><font></font></span><span><font></font></span><span><font></font></span><span><font></font></span><span><font></font></span><span><font></font></span><span><font><font>textureCube = THREE.ImageUtils.loadTextureCube（URL）的;</font></font></span></code></pre>
        <p>
            <font>
                <font>图像</font>
            </font><code><font><font>sky1.png</font></font></code>
            <font>
                <font>被包括在示例代码下载。</font>
            </font>
        </p>
        <p>
            <font>
                <font>现在，我们需要一个立方体着色器与标准制服绘制（着色器输入。）请注意，我们设置了</font>
            </font><code><font><font>tCube</font></font></code>
            <font>
                <font>质地是我们的纹理。</font>
            </font>
        </p>
        <pre><code><span><font><font>//设置立方体着色器</font></font></span><span><font><font>变种着色器= THREE.ShaderUtils.lib [“魔方”]; </font></font></span><span><font><font>VAR制服= THREE.UniformsUtils.clone（shader.uniforms） </font></font></span><span><font><font>。</font><font>制服['tCube'] =质感textureCube; </font></font></span><span><font><font>VAR材料=新三.ShaderMaterial（{ </font></font></span><span><font><font>        fragmentShader：shader.fragmentShader，</font></font></span><span><font><font>        vertexShader：shader.vertexShader，</font></font></span><span><font><font>        制服：制服</font></font></span><span><font><font>}）;</font></font></span><span> </span></code></pre>
        <p>
            <font>
                <font>现在，我们需要一个立方体形状。</font>
                <font>将大小设置为</font>
            </font><code><font><font>10000</font></font></code>
            <font>
                <font>。</font>
                <font>这将是一个很大的立方体。</font>
                <font>现在，我们将它添加到场景中。</font>
                <font>我们设置</font>
            </font><code><font><font>flipSided</font></font></code>
            <font>
                <font>为true，因为默认的立方体在外面画的质感。</font>
                <font>在我们的例子中，我们都在立方体的内部。</font>
            </font>
        </p>
        <pre><code><span><font><font>//创建一个天空盒</font></font></span><span><font><font>变种大小= 10000; </font></font></span><span><font><font>skyboxMesh =新THREE.Mesh（   </font></font></span><span><font><font>    新THREE.CubeGeometry（大小，尺寸，大小），材料）; </font></font></span><span><font><font>//注意!! </font><font>画在里面，而不是外面</font></font></span><span><font><font>skyboxMesh.flipSided = TRUE; </font><font>//你必须有这样或你不会看到任何东西</font></font></span><span><font><font>scene.add（skyboxMesh）;</font></font></span><span> </span></code></pre>
        <p>
            <font>
                <font>现在让我们从太阳添加光源。</font>
                <font>如果没有光，我们不能什么都看不到。</font>
            </font>
        </p>
        <pre><code><span><font><font>//添加日光</font></font></span><span><font><font>VAR光=新THREE.SpotLight（）; </font></font></span><span><font><font>light.position.set（0,500,0）; </font></font></span><span><font><font>scene.add（光）;</font></font></span></code></pre>
        <p>
            <font>
                <font>下面是我们到目前为止已有：</font>
            </font>
        </p>
        <p><img src="./style/gl_sky.png"></p>
        <h3><a id="ground"><font><font>添加地平面</font></font></a></h3>
        <p>
            <font>
                <font>现在，我们希望有一个地平面。</font>
                <font>首先，你需要加载图像草（</font>
            </font>
            <a href="http://www.tutorialsforblender3d.com/Textures/Grass/Grass_1.htm">
                <font>
                    <font>原源</font>
                </font>
            </a>
            <font>
                <font>）作为纹理。</font>
                <font>（也包括在示例代码草图像。）设置它在x和y方向重复。</font>
                <font>重复值应是相同的纹理的大小，通常应该是两个（例如：256）的功率。</font>
            </font>
        </p>
        <pre><code><span><font><font>//添加地面</font></font></span><span><font><font>无功grassTex = THREE.ImageUtils.loadTexture（“图像/ grass.png'）; </font></font></span><span><font><font>grassTex.wrapS = THREE.RepeatWrapping; </font></font></span><span><font><font>grassTex.wrapT = THREE.RepeatWrapping; </font></font></span><span><font><font>grassTex.repeat.x = 256; </font></font></span><span><font><font>grassTex.repeat。 Y = 256; </font></font></span><span><font><font>VAR groundMat =新THREE.MeshBasicMaterial（{图：grassTex}）;</font></font></span></code></pre>
        <p>
            <font>
                <font>接下来是几何形状。</font>
                <font>这仅仅是一个空间大飞机。</font>
                <font>平面的大小为400×400相比，相机，但相对于天空，其被设置为10000的大小非常小这是相当大的。</font>
            </font>
        </p>
        <pre><code><span><font><font>VAR groundGeo =新THREE.PlaneGeometry（400,400）; </font></font></span></code></pre>
        <p>
            <font>
                <font>现在，我们可以将它们组合成一个网格。</font>
                <font>设置</font>
            </font><code><font><font>position.y</font></font></code>
            <font>
                <font>为-1.9所以这将是圆环下方。</font>
                <font>设置</font>
            </font><code><font><font>rotation.x</font></font></code>
            <font>
                <font>到90度，使地面是水平的（平面是默认的垂直）。如果你不能看到，这架飞机试图设置</font>
            </font><code><font><font>doubleSided</font></font></code>
            <font>
                <font>为true。</font>
                <font>飞机只画在默认情况下的单面。</font>
            </font>
        </p>
        <pre><code><span><font><font>VAR地面=新THREE.Mesh（groundGeo，groundMat）; </font></font></span><span><font><font>ground.position.y = -1.9; </font><font>//降低IT </font></font></span><span><font><font>ground.rotation.x = -Math.PI / 2; </font><font>// -绕x轴90度</font></font></span><span><font><font>//重要的是，借鉴双方</font></font></span><span><font><font>ground.doubleSided = TRUE; </font></font></span><span><font><font>scene.add（地）;</font></font></span></code></pre>
        <p>
            <font>
                <font>下面是它应该是什么样子，现在：</font>
            </font>
        </p>
        <p><img src="./style/gl_grass.png"></p>
        <h3><a id="car"><font><font>添加一个汽车模型</font></font></a></h3>
        <p>
            <font>
                <font>要与汽车更换圆环，我们将加载一个外部的模式，在这种情况下，通过创建一个布加迪威龙的一个非常详细的模型</font>
            </font>
            <a href="http://artist-3d.com/free_3d_models/dnm/model_disp.php?uid=1129">
                <font>
                    <font>Troyano
                    </font>
                </font>
            </a>
            <font>
                <font>。</font>
                <font>我得到了这些从</font>
            </font>
            <a href="https://github.com/mrdoob/three.js/tree/master/examples">
                <font>
                    <font>ThreeJS例子回购</font>
                </font>
            </a>
            <font>
                <font>。</font>
                <font>您可以在示例代码下载中找到它们。</font>
                <font>由于这种模式是二进制格式，而不是JSON，我们将使用加载它
                </font>
            </font><code><font><font>THREE.BinaryLoader</font></font></code>
            <font>
                <font>。</font>
            </font>
        </p>
        <pre><code><span><font><font>//装车             </font></font></span><span><font><font>//重要：一定要用./或者它可能无法加载中的.bin正确</font></font></span><span><font><font>。新THREE.BinaryLoader（）负载（'./ VeyronNoUv_bin.js'，函数（几何）{ </font></font></span><span><font><font>    VAR橙色=新THREE.MeshLambertMaterial（{颜色：0x995500，不透明度：1.0，透明：假}）; </font></font></span><span><font><font>    VAR网=新THREE.Mesh（几何，橙色）; </font></font></span><span><font><font>    mesh.scale.x = mesh.scale.y = mesh.scale.z = 0.05; </font></font></span><span><font><font>    scene.add（目）; </font></font></span><span><font><font>    车=目; </font></font></span><span><font><font>}）;</font></font></span></code></pre>
        <p>
            <font>
                <font>注意，该材料是一种</font>
            </font><code><font><font>MeshLambertMaterial</font></font></code>
            <font>
                <font>而非</font>
            </font><code><font><font>MeshNormalMaterial</font></font></code>
            <font>
                <font>我们之前使用。</font>
                <font>这会给轿厢一个很好的纯色是基于光正常阴影（橙色，在这种情况下）。</font>
                <font>相比于圆环这个网格是默认巨大的，所以其缩小至5％，然后将其添加到场景中。</font>
            </font>
        </p>
        <p>
            <font>
                <font>下面是它看起来像现在：</font>
            </font>
        </p>
        <p><img src="./style/gl_car.png"></p>
        <h3><a id="keyboard"><font><font>键盘控制</font></font></a></h3>
        <p>
            <font>
                <font>当然，汽车只是坐在那里没有什么好玩的。</font>
                <font>而且它是太遥远了。</font>
                <font>让我们把它移动。</font>
                <font>目前</font>
            </font><code><font><font>cameraControl</font></font></code>
            <font>
                <font>对象围绕移动相机。</font>
                <font>删除并创建一个新</font>
            </font><code><font><font>KeyboardState</font></font></code>
            <font>
                <font>其中对象</font>
            </font><code><font><font>cameraControl</font></font></code>
            <font>
                <font>对象初始化。</font>
                <font>您将需要导入</font>
            </font><code><font><font>供应商/ threex / THREEx.KeyboardState.js</font></font></code>
            <font>
                <font>在你的页面的顶部。</font>
            </font>
        </p>
        <pre><code><span><font><font>&lt;SCRIPT SRC =“供应商/ threex / THREEx.KeyboardState.js”&gt; &lt;/ SCRIPT&gt; </font></font></span></code></pre>
        <pre><code><span><font><font>//创建一个摄像机控逆变</font></font></span><span><font><font>// cameraControls =新THREEx.DragPanControls（摄像头）</font></font></span><span><font><font>键盘=新THREEx.KeyboardState（）;</font></font></span></code></pre>
        <p>
            <font>
                <font>现在，再往</font>
            </font><code><font><font>渲染（）</font></font></code>
            <font>
                <font>函数。</font>
                <font>键盘对象将让我们查询键盘的当前状态。</font>
                <font>动车，周围用键盘代替</font>
            </font><code><font><font>cameraControls.update（）</font></font></code>
            <font>
                <font>使用此代码：</font>
            </font>
        </p>
        <pre><code><span><font><font>//更新摄像机控制</font></font></span><span><font><font>//cameraControls.update（）; </font></font></span><span><font><font>如果（keyboard.pressed（“左”））{ </font></font></span><span><font><font>    car.rotation.y + = 0.1; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（keyboard.pressed（“右”））{ </font></font></span><span><font><font>    car.rotation .Y - = 0.1; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（keyboard.pressed（“向上”））{ </font></font></span><span><font><font>    car.position.z - = 1.0; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（keyboard.pressed（“下”））{ </font></font></span><span><font><font>    car.position.z + = 1.0; </font></font></span><span><font><font>}</font></font></span></code></pre>
        <p>
            <font>
                <font>现在的汽车是“操控性”使用键盘。</font>
                <font>当然，它看起来并不很现实。</font>
                <font>该车侧身可以滑动。</font>
                <font>为了解决这个问题，我们需要一个载体来表示汽车的电流方向。</font>
                <font>添加</font>
            </font><code><font><font>角度</font></font></code>
            <font>
                <font>变量和更改代码如下所示：</font>
            </font>
        </p>
        <pre><code><span><font><font>如果（keyboard.pressed（“左”））{ </font></font></span><span><font><font>    car.rotation.y + = 0.1; </font></font></span><span><font><font>    角+ = 0.1; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（keyboard.pressed（“右”））{ </font></font></span><span><font><font>    car.rotation.y - = 0.1; </font></font></span><span><font><font>    角- = 0.1; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（keyboard.pressed（“向上”））{ </font></font></span><span><font><font>    car.position.z - = Math.sin（利用广角）; </font></font></span><span><font><font>    car.position.x - = Math.cos（利用广角）; </font></font></span><span><font><font>} </font></font></span><span><font><font>如果（键盘.pressed（“下”））{ </font></font></span><span><font><font>    car.position.z + = Math.sin（利用广角）; </font></font></span><span><font><font>    car.position.x + = Math.cos（利用广角）; </font></font></span><span><font><font>}</font></font></span></code></pre>
        <h3><a id="next"><font><font>下一步</font></font></a></h3>
        <p>
            <font>
                <font>以上就是本次动手的。</font>
                <font>如果您希望继续使用这个例子的工作，在这里，你可能要添加一些东西。</font>
            </font>
        </p>
        <ul>
            <li>
                <font>
                    <font>使相机跟着上车。</font>
                </font>
            </li>
            <li>
                <font>
                    <font>使汽车有光泽。</font>
                    <font>看看源最初的例子，这是基础上的。</font>
                    <font>[链接]。</font>
                </font>
            </li>
            <li>
                <font>
                    <font>使汽车停止，当你到达世界的边缘。</font>
                </font>
            </li>
            <li>
                <font>
                    <font>上一章这一幕添加点的画面效果。</font>
                </font>
            </li>
        </ul>
        <p>
            <font>
                <font>您可以查看最终版本</font>
            </font>
            <a href="./-examples/WebGL/car.htm">
                <font>
                    <font>在这里</font>
                </font>
            </a>
            <font>
                <font>。</font>
            </font>
        </p>
        <p>
            <a href="http://mrdoob.github.com/three.js/docs/49/">
                <font>
                    <font>ThreeJS文档</font>
                </font>
            </a>
        </p>
    </div>
    <div class="chapnav bottom">
        <a class="prevchap" href="./chapter10.htm">
            <font>
                <font>上一个</font>
            </font>
        </a>
        <a class="toclink" href="./index.htm">
            <font>
                <font>目录</font>
            </font>
        </a>
        <a class="nextchap" href="./chapter12.htm">
            <font>
                <font>下一个</font>
            </font>
        </a>
    </div>
    
</body>

</html>
