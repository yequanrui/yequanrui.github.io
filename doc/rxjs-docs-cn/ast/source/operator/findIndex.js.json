{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "FindValueOperator",
            "range": [
              9,
              26
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 26
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "FindValueOperator",
            "range": [
              9,
              26
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 26
              }
            }
          },
          "range": [
            9,
            26
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 26
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./find",
        "raw": "'./find'",
        "range": [
          34,
          42
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 34
          },
          "end": {
            "line": 1,
            "column": 42
          }
        }
      },
      "range": [
        0,
        43
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 43
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * 只发出源 Observable 所发出的值中第一个满足条件的值的索引。\n *\n * <span class=\"informal\">它很像 {@link find} , 但发出的是找到的值的索引，\n * 而不是值本身。</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` 会查找源 Observable 中与 `predicate` 函数体现的指定条件匹配的第一项，然后\n * 返回其索引(从0开始)。不同于 {@link first}，在 `findIndex` 中 `predicate` 是必须的，而且如果没找到\n * 有效的值的话也不会发出错误。\n *\n * @example <caption>找到并发出第一个点击 DIV 元素的事件的索引</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * 使用每项来调用的函数，用于测试是否符合条件。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {Observable<T>} 符合条件的第一项的索引的 Observable 。\n * @method find\n * @owner Observable\n ",
          "range": [
            44,
            971
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "findIndex",
          "range": [
            988,
            997
          ],
          "loc": {
            "start": {
              "line": 31,
              "column": 16
            },
            "end": {
              "line": 31,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "predicate",
            "range": [
              998,
              1007
            ],
            "loc": {
              "start": {
                "line": 31,
                "column": 26
              },
              "end": {
                "line": 31,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "thisArg",
            "range": [
              1009,
              1016
            ],
            "loc": {
              "start": {
                "line": 31,
                "column": 37
              },
              "end": {
                "line": 31,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      1031,
                      1035
                    ],
                    "loc": {
                      "start": {
                        "line": 32,
                        "column": 11
                      },
                      "end": {
                        "line": 32,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1036,
                      1040
                    ],
                    "loc": {
                      "start": {
                        "line": 32,
                        "column": 16
                      },
                      "end": {
                        "line": 32,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    1031,
                    1040
                  ],
                  "loc": {
                    "start": {
                      "line": 32,
                      "column": 11
                    },
                    "end": {
                      "line": 32,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "FindValueOperator",
                      "range": [
                        1045,
                        1062
                      ],
                      "loc": {
                        "start": {
                          "line": 32,
                          "column": 25
                        },
                        "end": {
                          "line": 32,
                          "column": 42
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "predicate",
                        "range": [
                          1063,
                          1072
                        ],
                        "loc": {
                          "start": {
                            "line": 32,
                            "column": 43
                          },
                          "end": {
                            "line": 32,
                            "column": 52
                          }
                        }
                      },
                      {
                        "type": "ThisExpression",
                        "range": [
                          1074,
                          1078
                        ],
                        "loc": {
                          "start": {
                            "line": 32,
                            "column": 54
                          },
                          "end": {
                            "line": 32,
                            "column": 58
                          }
                        }
                      },
                      {
                        "type": "Literal",
                        "value": true,
                        "raw": "true",
                        "range": [
                          1080,
                          1084
                        ],
                        "loc": {
                          "start": {
                            "line": 32,
                            "column": 60
                          },
                          "end": {
                            "line": 32,
                            "column": 64
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "thisArg",
                        "range": [
                          1086,
                          1093
                        ],
                        "loc": {
                          "start": {
                            "line": 32,
                            "column": 66
                          },
                          "end": {
                            "line": 32,
                            "column": 73
                          }
                        }
                      }
                    ],
                    "range": [
                      1041,
                      1094
                    ],
                    "loc": {
                      "start": {
                        "line": 32,
                        "column": 21
                      },
                      "end": {
                        "line": 32,
                        "column": 74
                      }
                    }
                  }
                ],
                "range": [
                  1031,
                  1095
                ],
                "loc": {
                  "start": {
                    "line": 32,
                    "column": 11
                  },
                  "end": {
                    "line": 32,
                    "column": 75
                  }
                }
              },
              "range": [
                1024,
                1096
              ],
              "loc": {
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 76
                }
              }
            }
          ],
          "range": [
            1018,
            1098
          ],
          "loc": {
            "start": {
              "line": 31,
              "column": 46
            },
            "end": {
              "line": 33,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          979,
          1098
        ],
        "loc": {
          "start": {
            "line": 31,
            "column": 7
          },
          "end": {
            "line": 33,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * 只发出源 Observable 所发出的值中第一个满足条件的值的索引。\n *\n * <span class=\"informal\">它很像 {@link find} , 但发出的是找到的值的索引，\n * 而不是值本身。</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` 会查找源 Observable 中与 `predicate` 函数体现的指定条件匹配的第一项，然后\n * 返回其索引(从0开始)。不同于 {@link first}，在 `findIndex` 中 `predicate` 是必须的，而且如果没找到\n * 有效的值的话也不会发出错误。\n *\n * @example <caption>找到并发出第一个点击 DIV 元素的事件的索引</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * 使用每项来调用的函数，用于测试是否符合条件。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {Observable<T>} 符合条件的第一项的索引的 Observable 。\n * @method find\n * @owner Observable\n ",
            "range": [
              44,
              971
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 30,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=findIndex.js.map",
            "range": [
              1099,
              1136
            ],
            "loc": {
              "start": {
                "line": 34,
                "column": 0
              },
              "end": {
                "line": 34,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        972,
        1098
      ],
      "loc": {
        "start": {
          "line": 31,
          "column": 0
        },
        "end": {
          "line": 33,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * 只发出源 Observable 所发出的值中第一个满足条件的值的索引。\n *\n * <span class=\"informal\">它很像 {@link find} , 但发出的是找到的值的索引，\n * 而不是值本身。</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` 会查找源 Observable 中与 `predicate` 函数体现的指定条件匹配的第一项，然后\n * 返回其索引(从0开始)。不同于 {@link first}，在 `findIndex` 中 `predicate` 是必须的，而且如果没找到\n * 有效的值的话也不会发出错误。\n *\n * @example <caption>找到并发出第一个点击 DIV 元素的事件的索引</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * 使用每项来调用的函数，用于测试是否符合条件。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {Observable<T>} 符合条件的第一项的索引的 Observable 。\n * @method find\n * @owner Observable\n ",
          "range": [
            44,
            971
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 30,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=findIndex.js.map",
          "range": [
            1099,
            1136
          ],
          "loc": {
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 34,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1098
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 33,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * 只发出源 Observable 所发出的值中第一个满足条件的值的索引。\n *\n * <span class=\"informal\">它很像 {@link find} , 但发出的是找到的值的索引，\n * 而不是值本身。</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` 会查找源 Observable 中与 `predicate` 函数体现的指定条件匹配的第一项，然后\n * 返回其索引(从0开始)。不同于 {@link first}，在 `findIndex` 中 `predicate` 是必须的，而且如果没找到\n * 有效的值的话也不会发出错误。\n *\n * @example <caption>找到并发出第一个点击 DIV 元素的事件的索引</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * 使用每项来调用的函数，用于测试是否符合条件。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {Observable<T>} 符合条件的第一项的索引的 Observable 。\n * @method find\n * @owner Observable\n ",
      "range": [
        44,
        971
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=findIndex.js.map",
      "range": [
        1099,
        1136
      ],
      "loc": {
        "start": {
          "line": 34,
          "column": 0
        },
        "end": {
          "line": 34,
          "column": 37
        }
      }
    }
  ]
}