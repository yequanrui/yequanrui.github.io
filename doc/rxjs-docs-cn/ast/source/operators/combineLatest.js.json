{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportDefaultSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              7,
              22
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 7
              },
              "end": {
                "line": 1,
                "column": 22
              }
            }
          },
          "range": [
            7,
            22
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 7
            },
            "end": {
              "line": 1,
              "column": 22
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../observables/ArrayObservable",
        "raw": "'../observables/ArrayObservable'",
        "range": [
          28,
          60
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 60
          }
        }
      },
      "range": [
        0,
        61
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 61
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              71,
              92
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              71,
              92
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 30
              }
            }
          },
          "range": [
            71,
            92
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./combineLatest-support",
        "raw": "'./combineLatest-support'",
        "range": [
          100,
          125
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 38
          },
          "end": {
            "line": 2,
            "column": 63
          }
        }
      },
      "range": [
        62,
        126
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 64
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing\n * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables\n * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return\n * value of that, or just emitting the array of recent values directly if there is no `project` function.\n * @param {...Observable} observables the observables to combine the source with\n * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.\n * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of\n * the most recent values from each observable.\n ",
          "range": [
            127,
            1013
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportDefaultDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "combineLatest",
          "range": [
            1038,
            1051
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 24
            },
            "end": {
              "line": 13,
              "column": 37
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                1055,
                1066
              ],
              "loc": {
                "start": {
                  "line": 13,
                  "column": 41
                },
                "end": {
                  "line": 13,
                  "column": 52
                }
              }
            },
            "range": [
              1052,
              1066
            ],
            "loc": {
              "start": {
                "line": 13,
                "column": 38
              },
              "end": {
                "line": 13,
                "column": 52
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ExpressionStatement",
              "expression": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "Identifier",
                    "name": "observables",
                    "range": [
                      1074,
                      1085
                    ],
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 4
                      },
                      "end": {
                        "line": 14,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "unshift",
                    "range": [
                      1086,
                      1093
                    ],
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 16
                      },
                      "end": {
                        "line": 14,
                        "column": 23
                      }
                    }
                  },
                  "range": [
                    1074,
                    1093
                  ],
                  "loc": {
                    "start": {
                      "line": 14,
                      "column": 4
                    },
                    "end": {
                      "line": 14,
                      "column": 23
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "ThisExpression",
                    "range": [
                      1094,
                      1098
                    ],
                    "loc": {
                      "start": {
                        "line": 14,
                        "column": 24
                      },
                      "end": {
                        "line": 14,
                        "column": 28
                      }
                    }
                  }
                ],
                "range": [
                  1074,
                  1099
                ],
                "loc": {
                  "start": {
                    "line": 14,
                    "column": 4
                  },
                  "end": {
                    "line": 14,
                    "column": 29
                  }
                }
              },
              "range": [
                1074,
                1100
              ],
              "loc": {
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 30
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "project",
                    "range": [
                      1109,
                      1116
                    ],
                    "loc": {
                      "start": {
                        "line": 15,
                        "column": 8
                      },
                      "end": {
                        "line": 15,
                        "column": 15
                      }
                    }
                  },
                  "init": null,
                  "range": [
                    1109,
                    1116
                  ],
                  "loc": {
                    "start": {
                      "line": 15,
                      "column": 8
                    },
                    "end": {
                      "line": 15,
                      "column": 15
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                1105,
                1117
              ],
              "loc": {
                "start": {
                  "line": 15,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 16
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        1133,
                        1144
                      ],
                      "loc": {
                        "start": {
                          "line": 16,
                          "column": 15
                        },
                        "end": {
                          "line": 16,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            1145,
                            1156
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 27
                            },
                            "end": {
                              "line": 16,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            1157,
                            1163
                          ],
                          "loc": {
                            "start": {
                              "line": 16,
                              "column": 39
                            },
                            "end": {
                              "line": 16,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          1145,
                          1163
                        ],
                        "loc": {
                          "start": {
                            "line": 16,
                            "column": 27
                          },
                          "end": {
                            "line": 16,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          1166,
                          1167
                        ],
                        "loc": {
                          "start": {
                            "line": 16,
                            "column": 48
                          },
                          "end": {
                            "line": 16,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        1145,
                        1167
                      ],
                      "loc": {
                        "start": {
                          "line": 16,
                          "column": 27
                        },
                        "end": {
                          "line": 16,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      1133,
                      1168
                    ],
                    "loc": {
                      "start": {
                        "line": 16,
                        "column": 15
                      },
                      "end": {
                        "line": 16,
                        "column": 50
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    1126,
                    1168
                  ],
                  "loc": {
                    "start": {
                      "line": 16,
                      "column": 8
                    },
                    "end": {
                      "line": 16,
                      "column": 50
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    1173,
                    1183
                  ],
                  "loc": {
                    "start": {
                      "line": 16,
                      "column": 55
                    },
                    "end": {
                      "line": 16,
                      "column": 65
                    }
                  }
                },
                "range": [
                  1126,
                  1183
                ],
                "loc": {
                  "start": {
                    "line": 16,
                    "column": 8
                  },
                  "end": {
                    "line": 16,
                    "column": 65
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          1195,
                          1202
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 8
                          },
                          "end": {
                            "line": 17,
                            "column": 15
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              1205,
                              1216
                            ],
                            "loc": {
                              "start": {
                                "line": 17,
                                "column": 18
                              },
                              "end": {
                                "line": 17,
                                "column": 29
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              1217,
                              1220
                            ],
                            "loc": {
                              "start": {
                                "line": 17,
                                "column": 30
                              },
                              "end": {
                                "line": 17,
                                "column": 33
                              }
                            }
                          },
                          "range": [
                            1205,
                            1220
                          ],
                          "loc": {
                            "start": {
                              "line": 17,
                              "column": 18
                            },
                            "end": {
                              "line": 17,
                              "column": 33
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          1205,
                          1222
                        ],
                        "loc": {
                          "start": {
                            "line": 17,
                            "column": 18
                          },
                          "end": {
                            "line": 17,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        1195,
                        1222
                      ],
                      "loc": {
                        "start": {
                          "line": 17,
                          "column": 8
                        },
                        "end": {
                          "line": 17,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      1195,
                      1223
                    ],
                    "loc": {
                      "start": {
                        "line": 17,
                        "column": 8
                      },
                      "end": {
                        "line": 17,
                        "column": 36
                      }
                    }
                  }
                ],
                "range": [
                  1185,
                  1229
                ],
                "loc": {
                  "start": {
                    "line": 16,
                    "column": 67
                  },
                  "end": {
                    "line": 18,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                1122,
                1229
              ],
              "loc": {
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 5
                }
              }
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        1245,
                        1260
                      ],
                      "loc": {
                        "start": {
                          "line": 19,
                          "column": 15
                        },
                        "end": {
                          "line": 19,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          1261,
                          1272
                        ],
                        "loc": {
                          "start": {
                            "line": 19,
                            "column": 31
                          },
                          "end": {
                            "line": 19,
                            "column": 42
                          }
                        }
                      }
                    ],
                    "range": [
                      1241,
                      1273
                    ],
                    "loc": {
                      "start": {
                        "line": 19,
                        "column": 11
                      },
                      "end": {
                        "line": 19,
                        "column": 43
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1274,
                      1278
                    ],
                    "loc": {
                      "start": {
                        "line": 19,
                        "column": 44
                      },
                      "end": {
                        "line": 19,
                        "column": 48
                      }
                    }
                  },
                  "range": [
                    1241,
                    1278
                  ],
                  "loc": {
                    "start": {
                      "line": 19,
                      "column": 11
                    },
                    "end": {
                      "line": 19,
                      "column": 48
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "CombineLatestOperator",
                      "range": [
                        1283,
                        1304
                      ],
                      "loc": {
                        "start": {
                          "line": 19,
                          "column": 53
                        },
                        "end": {
                          "line": 19,
                          "column": 74
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          1305,
                          1312
                        ],
                        "loc": {
                          "start": {
                            "line": 19,
                            "column": 75
                          },
                          "end": {
                            "line": 19,
                            "column": 82
                          }
                        }
                      }
                    ],
                    "range": [
                      1279,
                      1313
                    ],
                    "loc": {
                      "start": {
                        "line": 19,
                        "column": 49
                      },
                      "end": {
                        "line": 19,
                        "column": 83
                      }
                    }
                  }
                ],
                "range": [
                  1241,
                  1314
                ],
                "loc": {
                  "start": {
                    "line": 19,
                    "column": 11
                  },
                  "end": {
                    "line": 19,
                    "column": 84
                  }
                }
              },
              "range": [
                1234,
                1315
              ],
              "loc": {
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 85
                }
              }
            }
          ],
          "range": [
            1068,
            1317
          ],
          "loc": {
            "start": {
              "line": 13,
              "column": 54
            },
            "end": {
              "line": 20,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1029,
          1317
        ],
        "loc": {
          "start": {
            "line": 13,
            "column": 15
          },
          "end": {
            "line": 20,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing\n * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables\n * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return\n * value of that, or just emitting the array of recent values directly if there is no `project` function.\n * @param {...Observable} observables the observables to combine the source with\n * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.\n * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of\n * the most recent values from each observable.\n ",
            "range": [
              127,
              1013
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 12,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": []
      },
      "range": [
        1014,
        1317
      ],
      "loc": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing\n * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables\n * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return\n * value of that, or just emitting the array of recent values directly if there is no `project` function.\n * @param {...Observable} observables the observables to combine the source with\n * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.\n * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of\n * the most recent values from each observable.\n ",
          "range": [
            127,
            1013
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 3
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1317
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 20,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing\n * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables\n * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return\n * value of that, or just emitting the array of recent values directly if there is no `project` function.\n * @param {...Observable} observables the observables to combine the source with\n * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.\n * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of\n * the most recent values from each observable.\n ",
      "range": [
        127,
        1013
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 12,
          "column": 3
        }
      }
    }
  ]
}