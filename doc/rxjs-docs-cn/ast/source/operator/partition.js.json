{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "not",
            "range": [
              9,
              12
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 12
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "not",
            "range": [
              9,
              12
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 12
              }
            }
          },
          "range": [
            9,
            12
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 12
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/not",
        "raw": "'../util/not'",
        "range": [
          20,
          33
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 20
          },
          "end": {
            "line": 1,
            "column": 33
          }
        }
      },
      "range": [
        0,
        34
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 34
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "filter",
            "range": [
              44,
              50
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 15
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "filter",
            "range": [
              44,
              50
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 15
              }
            }
          },
          "range": [
            44,
            50
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 15
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./filter",
        "raw": "'./filter'",
        "range": [
          58,
          68
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 23
          },
          "end": {
            "line": 2,
            "column": 33
          }
        }
      },
      "range": [
        35,
        69
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 34
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * 将源 Observable 一分为二，一个是所有满足 predicate 函数的值，另一个是所有\n * 不满足 predicate 的值。\n *\n * <span class=\"informal\">它很像 {@link filter}，但是返回两个 Observables ：\n * 一个像 {@link filter} 的输出， 而另一个是所有不符合条件的值。</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` 输出有两个 Observables 的数组，这两个 Observables 是通过给定的 `predicate`\n * 函数将源 Observable 的值进行划分得到的。该数组的第一个 Observable 发出 predicate 参数\n * 返回 true 的源值。第二个 Observable 发出 predicate 参数返回 false 的源值。第一个像是\n * {@link filter} ，而第二个像是 predicate 取反的 {@link filter} 。\n *\n * @example <caption>将点击事件划分为点击 DIV 元素和点击其他元素</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate 评估源 Observable\n * 所发出的每个值的函数。如果它返回 `true` ，那么发出的值就在返回的数组中的第一个\n * Observable 中，如果返回的是 `false` ，那么发出的值就在返回的数组的第二个\n * Observable 中。`index` 参数是自订阅开始后发送序列的索引，是从 `0` 开始的。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {[Observable<T>, Observable<T>]} 有两个 Observables 的数组：\n * 一个是通过 predicate 函数的所有值，另一个是没有通过 predicate 的所有值。\n * @method partition\n * @owner Observable\n ",
          "range": [
            70,
            1450
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "partition",
          "range": [
            1467,
            1476
          ],
          "loc": {
            "start": {
              "line": 37,
              "column": 16
            },
            "end": {
              "line": 37,
              "column": 25
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "predicate",
            "range": [
              1477,
              1486
            ],
            "loc": {
              "start": {
                "line": 37,
                "column": 26
              },
              "end": {
                "line": 37,
                "column": 35
              }
            }
          },
          {
            "type": "Identifier",
            "name": "thisArg",
            "range": [
              1488,
              1495
            ],
            "loc": {
              "start": {
                "line": 37,
                "column": 37
              },
              "end": {
                "line": 37,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "ArrayExpression",
                "elements": [
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "filter",
                        "range": [
                          1520,
                          1526
                        ],
                        "loc": {
                          "start": {
                            "line": 39,
                            "column": 8
                          },
                          "end": {
                            "line": 39,
                            "column": 14
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call",
                        "range": [
                          1527,
                          1531
                        ],
                        "loc": {
                          "start": {
                            "line": 39,
                            "column": 15
                          },
                          "end": {
                            "line": 39,
                            "column": 19
                          }
                        }
                      },
                      "range": [
                        1520,
                        1531
                      ],
                      "loc": {
                        "start": {
                          "line": 39,
                          "column": 8
                        },
                        "end": {
                          "line": 39,
                          "column": 19
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          1532,
                          1536
                        ],
                        "loc": {
                          "start": {
                            "line": 39,
                            "column": 20
                          },
                          "end": {
                            "line": 39,
                            "column": 24
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "predicate",
                        "range": [
                          1538,
                          1547
                        ],
                        "loc": {
                          "start": {
                            "line": 39,
                            "column": 26
                          },
                          "end": {
                            "line": 39,
                            "column": 35
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "thisArg",
                        "range": [
                          1549,
                          1556
                        ],
                        "loc": {
                          "start": {
                            "line": 39,
                            "column": 37
                          },
                          "end": {
                            "line": 39,
                            "column": 44
                          }
                        }
                      }
                    ],
                    "range": [
                      1520,
                      1557
                    ],
                    "loc": {
                      "start": {
                        "line": 39,
                        "column": 8
                      },
                      "end": {
                        "line": 39,
                        "column": 45
                      }
                    }
                  },
                  {
                    "type": "CallExpression",
                    "callee": {
                      "type": "MemberExpression",
                      "computed": false,
                      "object": {
                        "type": "Identifier",
                        "name": "filter",
                        "range": [
                          1567,
                          1573
                        ],
                        "loc": {
                          "start": {
                            "line": 40,
                            "column": 8
                          },
                          "end": {
                            "line": 40,
                            "column": 14
                          }
                        }
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "call",
                        "range": [
                          1574,
                          1578
                        ],
                        "loc": {
                          "start": {
                            "line": 40,
                            "column": 15
                          },
                          "end": {
                            "line": 40,
                            "column": 19
                          }
                        }
                      },
                      "range": [
                        1567,
                        1578
                      ],
                      "loc": {
                        "start": {
                          "line": 40,
                          "column": 8
                        },
                        "end": {
                          "line": 40,
                          "column": 19
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "ThisExpression",
                        "range": [
                          1579,
                          1583
                        ],
                        "loc": {
                          "start": {
                            "line": 40,
                            "column": 20
                          },
                          "end": {
                            "line": 40,
                            "column": 24
                          }
                        }
                      },
                      {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "not",
                          "range": [
                            1585,
                            1588
                          ],
                          "loc": {
                            "start": {
                              "line": 40,
                              "column": 26
                            },
                            "end": {
                              "line": 40,
                              "column": 29
                            }
                          }
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "predicate",
                            "range": [
                              1589,
                              1598
                            ],
                            "loc": {
                              "start": {
                                "line": 40,
                                "column": 30
                              },
                              "end": {
                                "line": 40,
                                "column": 39
                              }
                            }
                          },
                          {
                            "type": "Identifier",
                            "name": "thisArg",
                            "range": [
                              1600,
                              1607
                            ],
                            "loc": {
                              "start": {
                                "line": 40,
                                "column": 41
                              },
                              "end": {
                                "line": 40,
                                "column": 48
                              }
                            }
                          }
                        ],
                        "range": [
                          1585,
                          1608
                        ],
                        "loc": {
                          "start": {
                            "line": 40,
                            "column": 26
                          },
                          "end": {
                            "line": 40,
                            "column": 49
                          }
                        }
                      }
                    ],
                    "range": [
                      1567,
                      1609
                    ],
                    "loc": {
                      "start": {
                        "line": 40,
                        "column": 8
                      },
                      "end": {
                        "line": 40,
                        "column": 50
                      }
                    }
                  }
                ],
                "range": [
                  1510,
                  1615
                ],
                "loc": {
                  "start": {
                    "line": 38,
                    "column": 11
                  },
                  "end": {
                    "line": 41,
                    "column": 5
                  }
                }
              },
              "range": [
                1503,
                1616
              ],
              "loc": {
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 41,
                  "column": 6
                }
              }
            }
          ],
          "range": [
            1497,
            1618
          ],
          "loc": {
            "start": {
              "line": 37,
              "column": 46
            },
            "end": {
              "line": 42,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1458,
          1618
        ],
        "loc": {
          "start": {
            "line": 37,
            "column": 7
          },
          "end": {
            "line": 42,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * 将源 Observable 一分为二，一个是所有满足 predicate 函数的值，另一个是所有\n * 不满足 predicate 的值。\n *\n * <span class=\"informal\">它很像 {@link filter}，但是返回两个 Observables ：\n * 一个像 {@link filter} 的输出， 而另一个是所有不符合条件的值。</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` 输出有两个 Observables 的数组，这两个 Observables 是通过给定的 `predicate`\n * 函数将源 Observable 的值进行划分得到的。该数组的第一个 Observable 发出 predicate 参数\n * 返回 true 的源值。第二个 Observable 发出 predicate 参数返回 false 的源值。第一个像是\n * {@link filter} ，而第二个像是 predicate 取反的 {@link filter} 。\n *\n * @example <caption>将点击事件划分为点击 DIV 元素和点击其他元素</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate 评估源 Observable\n * 所发出的每个值的函数。如果它返回 `true` ，那么发出的值就在返回的数组中的第一个\n * Observable 中，如果返回的是 `false` ，那么发出的值就在返回的数组的第二个\n * Observable 中。`index` 参数是自订阅开始后发送序列的索引，是从 `0` 开始的。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {[Observable<T>, Observable<T>]} 有两个 Observables 的数组：\n * 一个是通过 predicate 函数的所有值，另一个是没有通过 predicate 的所有值。\n * @method partition\n * @owner Observable\n ",
            "range": [
              70,
              1450
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 36,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=partition.js.map",
            "range": [
              1619,
              1656
            ],
            "loc": {
              "start": {
                "line": 43,
                "column": 0
              },
              "end": {
                "line": 43,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1451,
        1618
      ],
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 42,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * 将源 Observable 一分为二，一个是所有满足 predicate 函数的值，另一个是所有\n * 不满足 predicate 的值。\n *\n * <span class=\"informal\">它很像 {@link filter}，但是返回两个 Observables ：\n * 一个像 {@link filter} 的输出， 而另一个是所有不符合条件的值。</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` 输出有两个 Observables 的数组，这两个 Observables 是通过给定的 `predicate`\n * 函数将源 Observable 的值进行划分得到的。该数组的第一个 Observable 发出 predicate 参数\n * 返回 true 的源值。第二个 Observable 发出 predicate 参数返回 false 的源值。第一个像是\n * {@link filter} ，而第二个像是 predicate 取反的 {@link filter} 。\n *\n * @example <caption>将点击事件划分为点击 DIV 元素和点击其他元素</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate 评估源 Observable\n * 所发出的每个值的函数。如果它返回 `true` ，那么发出的值就在返回的数组中的第一个\n * Observable 中，如果返回的是 `false` ，那么发出的值就在返回的数组的第二个\n * Observable 中。`index` 参数是自订阅开始后发送序列的索引，是从 `0` 开始的。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {[Observable<T>, Observable<T>]} 有两个 Observables 的数组：\n * 一个是通过 predicate 函数的所有值，另一个是没有通过 predicate 的所有值。\n * @method partition\n * @owner Observable\n ",
          "range": [
            70,
            1450
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=partition.js.map",
          "range": [
            1619,
            1656
          ],
          "loc": {
            "start": {
              "line": 43,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1618
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 42,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * 将源 Observable 一分为二，一个是所有满足 predicate 函数的值，另一个是所有\n * 不满足 predicate 的值。\n *\n * <span class=\"informal\">它很像 {@link filter}，但是返回两个 Observables ：\n * 一个像 {@link filter} 的输出， 而另一个是所有不符合条件的值。</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` 输出有两个 Observables 的数组，这两个 Observables 是通过给定的 `predicate`\n * 函数将源 Observable 的值进行划分得到的。该数组的第一个 Observable 发出 predicate 参数\n * 返回 true 的源值。第二个 Observable 发出 predicate 参数返回 false 的源值。第一个像是\n * {@link filter} ，而第二个像是 predicate 取反的 {@link filter} 。\n *\n * @example <caption>将点击事件划分为点击 DIV 元素和点击其他元素</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate 评估源 Observable\n * 所发出的每个值的函数。如果它返回 `true` ，那么发出的值就在返回的数组中的第一个\n * Observable 中，如果返回的是 `false` ，那么发出的值就在返回的数组的第二个\n * Observable 中。`index` 参数是自订阅开始后发送序列的索引，是从 `0` 开始的。\n * @param {any} [thisArg] 可选参数，用来决定 `predicate` 函数中的 `this` 的值。\n * @return {[Observable<T>, Observable<T>]} 有两个 Observables 的数组：\n * 一个是通过 predicate 函数的所有值，另一个是没有通过 predicate 的所有值。\n * @method partition\n * @owner Observable\n ",
      "range": [
        70,
        1450
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 36,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=partition.js.map",
      "range": [
        1619,
        1656
      ],
      "loc": {
        "start": {
          "line": 43,
          "column": 0
        },
        "end": {
          "line": 43,
          "column": 37
        }
      }
    }
  ]
}