{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isScheduler",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isScheduler",
        "raw": "'../util/isScheduler'",
        "range": [
          28,
          49
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 49
          }
        }
      },
      "range": [
        0,
        50
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 50
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              60,
              67
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "isArray",
            "range": [
              60,
              67
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 16
              }
            }
          },
          "range": [
            60,
            67
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 16
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../util/isArray",
        "raw": "'../util/isArray'",
        "range": [
          75,
          92
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 24
          },
          "end": {
            "line": 2,
            "column": 41
          }
        }
      },
      "range": [
        51,
        93
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 42
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              103,
              118
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "ArrayObservable",
            "range": [
              103,
              118
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 9
              },
              "end": {
                "line": 3,
                "column": 24
              }
            }
          },
          "range": [
            103,
            118
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 9
            },
            "end": {
              "line": 3,
              "column": 24
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./ArrayObservable",
        "raw": "'./ArrayObservable'",
        "range": [
          126,
          145
        ],
        "loc": {
          "start": {
            "line": 3,
            "column": 32
          },
          "end": {
            "line": 3,
            "column": 51
          }
        }
      },
      "range": [
        94,
        146
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 3,
          "column": 52
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              156,
              177
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              156,
              177
            ],
            "loc": {
              "start": {
                "line": 4,
                "column": 9
              },
              "end": {
                "line": 4,
                "column": 30
              }
            }
          },
          "range": [
            156,
            177
          ],
          "loc": {
            "start": {
              "line": 4,
              "column": 9
            },
            "end": {
              "line": 4,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "../operator/combineLatest",
        "raw": "'../operator/combineLatest'",
        "range": [
          185,
          212
        ],
        "loc": {
          "start": {
            "line": 4,
            "column": 38
          },
          "end": {
            "line": 4,
            "column": 65
          }
        }
      },
      "range": [
        147,
        213
      ],
      "loc": {
        "start": {
          "line": 4,
          "column": 0
        },
        "end": {
          "line": 4,
          "column": 66
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            214,
            249
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的。\n *\n * <span class=\"informal\">它将使用所有输入中的最新值计算公式，然后发出该公式的输出。</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` 结合所有输入 Observable 参数的值. 顺序订阅每个 Observable，\n * 每当任一输入 Observable 发出，收集每个输入 Observable 的最新值组成一个数组。所以，当你给操作符\n * 传入 n 个 Observable，返回的 Observable 总是会发出一个长度为 n 的数组，对应输入 Observable\n * 的顺序（第一个 Observable 的值放到数组的第一个）。\n *\n * 静态版本的 `combineLatest` 接受一个 Observables 数组或者每个 Observable 可以直接作为参数。\n * 请注意，如果你事先不知道你将要结合多少个 Observable， 那么 Observables 数组是一个好的选择。\n * 传递空的数组将会导致返回 Observable 立马完成。\n *\n * 为了保证输出数组的长度相同，`combineLatest` 实际上会等待所有的输入 Observable 至少发出一次，\n * 在返回 Observable 发出之前。这意味着如果某个输入 Observable 在其余的输入 Observable 之前发出，它所发出\n * 的值只保留最新的。另一方面，如果某个输入 Observable 没有发出值就完成了，返回 Observable 也不会发\n * 射值并立马完成，因为不可能从已经完成的 Observable 中收集到值。同样的，如果某个输入 Observable\n * 不发出值也不完成，`combineLatest`会永远不发出值也不结束。所以，再次强调下，它会等待所有的流\n * 去发出值。\n *\n * 如果给`combineLatest`至少传递一个输入 Observable 并且所有传入的输入 Observable 都发出了值，返回\n * Observable 将会在所有结合流完成后完成。所以即使某些 Observable 完成了，当其他输入 Observable\n * 发出值的时候，combineLatest返回 Observable 仍然会发出值。对于完成的输入 Observable，它\n * 的值一直是最后发出的值。另一方面，如果任一输入 Observable 发生错误，`combineLatest`也会\n * 立马触发错误状态，所有的其他输入 Observable 都会被解除订阅。\n *\n * `combineLatest`接受一个可选的参数投射函数，它接受返回 Observable 发出的值。投射函数\n * 可以返回任何数据，这些数据代替默认的数组被返回 Observable 发出。需要注意的是，投射函数并不接\n * 受值的数组，而是值本身。这意味着默认的投射函数就是一个接受所有参数并把它们放到一个数组里面的\n * 函数。\n *\n * @example <caption>结合两个 timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // 从现在开始，每隔1秒发出0, 1, 2...\n * const secondTimer = Rx.Observable.timer(500, 1000); // 0.5秒后，每隔1秒发出0, 1, 2...\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>结合 Observables 数组</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // 先发出0，然后在 n 秒后发出 n。\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // 日志\n * // [0, 0, 0] 立刻\n * // [1, 0, 0] 1s 后\n * // [1, 5, 0] 5s 后\n * // [1, 5, 10] 10s 后\n *\n *\n * @example <caption>使用 project 函数动态计算体重指数</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // 控制台输出:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 用来和其他 Observables 进行结合的输入 Observable 。\n * @param {ObservableInput} observable2 用来和其他 Observables 进行结合的输入 Observable 。\n * 可以有多个输入Observables传入或者第一个参数是Observables数组\n * @param {function} [project] 投射成输出 Observable 上的一个新的值。\n * @param {Scheduler} [scheduler=null] 用来订阅每个输入 Observable 的调度器。\n * @return {Observable} 该 Observable 为每个输入 Observable 的最新值的投射，或者每个输入 Observable 的最新值的数组。\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
          "range": [
            250,
            3490
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 90,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "combineLatest",
          "range": [
            3507,
            3520
          ],
          "loc": {
            "start": {
              "line": 91,
              "column": 16
            },
            "end": {
              "line": 91,
              "column": 29
            }
          }
        },
        "params": [
          {
            "type": "RestElement",
            "argument": {
              "type": "Identifier",
              "name": "observables",
              "range": [
                3524,
                3535
              ],
              "loc": {
                "start": {
                  "line": 91,
                  "column": 33
                },
                "end": {
                  "line": 91,
                  "column": 44
                }
              }
            },
            "range": [
              3521,
              3535
            ],
            "loc": {
              "start": {
                "line": 91,
                "column": 30
              },
              "end": {
                "line": 91,
                "column": 44
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "project",
                    "range": [
                      3547,
                      3554
                    ],
                    "loc": {
                      "start": {
                        "line": 92,
                        "column": 8
                      },
                      "end": {
                        "line": 92,
                        "column": 15
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      3557,
                      3561
                    ],
                    "loc": {
                      "start": {
                        "line": 92,
                        "column": 18
                      },
                      "end": {
                        "line": 92,
                        "column": 22
                      }
                    }
                  },
                  "range": [
                    3547,
                    3561
                  ],
                  "loc": {
                    "start": {
                      "line": 92,
                      "column": 8
                    },
                    "end": {
                      "line": 92,
                      "column": 22
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3543,
                3562
              ],
              "loc": {
                "start": {
                  "line": 92,
                  "column": 4
                },
                "end": {
                  "line": 92,
                  "column": 23
                }
              }
            },
            {
              "type": "VariableDeclaration",
              "declarations": [
                {
                  "type": "VariableDeclarator",
                  "id": {
                    "type": "Identifier",
                    "name": "scheduler",
                    "range": [
                      3571,
                      3580
                    ],
                    "loc": {
                      "start": {
                        "line": 93,
                        "column": 8
                      },
                      "end": {
                        "line": 93,
                        "column": 17
                      }
                    }
                  },
                  "init": {
                    "type": "Literal",
                    "value": null,
                    "raw": "null",
                    "range": [
                      3583,
                      3587
                    ],
                    "loc": {
                      "start": {
                        "line": 93,
                        "column": 20
                      },
                      "end": {
                        "line": 93,
                        "column": 24
                      }
                    }
                  },
                  "range": [
                    3571,
                    3587
                  ],
                  "loc": {
                    "start": {
                      "line": 93,
                      "column": 8
                    },
                    "end": {
                      "line": 93,
                      "column": 24
                    }
                  }
                }
              ],
              "kind": "let",
              "range": [
                3567,
                3588
              ],
              "loc": {
                "start": {
                  "line": 93,
                  "column": 4
                },
                "end": {
                  "line": 93,
                  "column": 25
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "isScheduler",
                  "range": [
                    3597,
                    3608
                  ],
                  "loc": {
                    "start": {
                      "line": 94,
                      "column": 8
                    },
                    "end": {
                      "line": 94,
                      "column": 19
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        3609,
                        3620
                      ],
                      "loc": {
                        "start": {
                          "line": 94,
                          "column": 20
                        },
                        "end": {
                          "line": 94,
                          "column": 31
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            3621,
                            3632
                          ],
                          "loc": {
                            "start": {
                              "line": 94,
                              "column": 32
                            },
                            "end": {
                              "line": 94,
                              "column": 43
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            3633,
                            3639
                          ],
                          "loc": {
                            "start": {
                              "line": 94,
                              "column": 44
                            },
                            "end": {
                              "line": 94,
                              "column": 50
                            }
                          }
                        },
                        "range": [
                          3621,
                          3639
                        ],
                        "loc": {
                          "start": {
                            "line": 94,
                            "column": 32
                          },
                          "end": {
                            "line": 94,
                            "column": 50
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          3642,
                          3643
                        ],
                        "loc": {
                          "start": {
                            "line": 94,
                            "column": 53
                          },
                          "end": {
                            "line": 94,
                            "column": 54
                          }
                        }
                      },
                      "range": [
                        3621,
                        3643
                      ],
                      "loc": {
                        "start": {
                          "line": 94,
                          "column": 32
                        },
                        "end": {
                          "line": 94,
                          "column": 54
                        }
                      }
                    },
                    "range": [
                      3609,
                      3644
                    ],
                    "loc": {
                      "start": {
                        "line": 94,
                        "column": 20
                      },
                      "end": {
                        "line": 94,
                        "column": 55
                      }
                    }
                  }
                ],
                "range": [
                  3597,
                  3645
                ],
                "loc": {
                  "start": {
                    "line": 94,
                    "column": 8
                  },
                  "end": {
                    "line": 94,
                    "column": 56
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          3657,
                          3666
                        ],
                        "loc": {
                          "start": {
                            "line": 95,
                            "column": 8
                          },
                          "end": {
                            "line": 95,
                            "column": 17
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              3669,
                              3680
                            ],
                            "loc": {
                              "start": {
                                "line": 95,
                                "column": 20
                              },
                              "end": {
                                "line": 95,
                                "column": 31
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              3681,
                              3684
                            ],
                            "loc": {
                              "start": {
                                "line": 95,
                                "column": 32
                              },
                              "end": {
                                "line": 95,
                                "column": 35
                              }
                            }
                          },
                          "range": [
                            3669,
                            3684
                          ],
                          "loc": {
                            "start": {
                              "line": 95,
                              "column": 20
                            },
                            "end": {
                              "line": 95,
                              "column": 35
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          3669,
                          3686
                        ],
                        "loc": {
                          "start": {
                            "line": 95,
                            "column": 20
                          },
                          "end": {
                            "line": 95,
                            "column": 37
                          }
                        }
                      },
                      "range": [
                        3657,
                        3686
                      ],
                      "loc": {
                        "start": {
                          "line": 95,
                          "column": 8
                        },
                        "end": {
                          "line": 95,
                          "column": 37
                        }
                      }
                    },
                    "range": [
                      3657,
                      3687
                    ],
                    "loc": {
                      "start": {
                        "line": 95,
                        "column": 8
                      },
                      "end": {
                        "line": 95,
                        "column": 38
                      }
                    }
                  }
                ],
                "range": [
                  3647,
                  3693
                ],
                "loc": {
                  "start": {
                    "line": 94,
                    "column": 58
                  },
                  "end": {
                    "line": 96,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3593,
                3693
              ],
              "loc": {
                "start": {
                  "line": 94,
                  "column": 4
                },
                "end": {
                  "line": 96,
                  "column": 5
                }
              }
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "UnaryExpression",
                  "operator": "typeof",
                  "argument": {
                    "type": "MemberExpression",
                    "computed": true,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        3709,
                        3720
                      ],
                      "loc": {
                        "start": {
                          "line": 97,
                          "column": 15
                        },
                        "end": {
                          "line": 97,
                          "column": 26
                        }
                      }
                    },
                    "property": {
                      "type": "BinaryExpression",
                      "operator": "-",
                      "left": {
                        "type": "MemberExpression",
                        "computed": false,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            3721,
                            3732
                          ],
                          "loc": {
                            "start": {
                              "line": 97,
                              "column": 27
                            },
                            "end": {
                              "line": 97,
                              "column": 38
                            }
                          }
                        },
                        "property": {
                          "type": "Identifier",
                          "name": "length",
                          "range": [
                            3733,
                            3739
                          ],
                          "loc": {
                            "start": {
                              "line": 97,
                              "column": 39
                            },
                            "end": {
                              "line": 97,
                              "column": 45
                            }
                          }
                        },
                        "range": [
                          3721,
                          3739
                        ],
                        "loc": {
                          "start": {
                            "line": 97,
                            "column": 27
                          },
                          "end": {
                            "line": 97,
                            "column": 45
                          }
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          3742,
                          3743
                        ],
                        "loc": {
                          "start": {
                            "line": 97,
                            "column": 48
                          },
                          "end": {
                            "line": 97,
                            "column": 49
                          }
                        }
                      },
                      "range": [
                        3721,
                        3743
                      ],
                      "loc": {
                        "start": {
                          "line": 97,
                          "column": 27
                        },
                        "end": {
                          "line": 97,
                          "column": 49
                        }
                      }
                    },
                    "range": [
                      3709,
                      3744
                    ],
                    "loc": {
                      "start": {
                        "line": 97,
                        "column": 15
                      },
                      "end": {
                        "line": 97,
                        "column": 50
                      }
                    }
                  },
                  "prefix": true,
                  "range": [
                    3702,
                    3744
                  ],
                  "loc": {
                    "start": {
                      "line": 97,
                      "column": 8
                    },
                    "end": {
                      "line": 97,
                      "column": 50
                    }
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": "function",
                  "raw": "'function'",
                  "range": [
                    3749,
                    3759
                  ],
                  "loc": {
                    "start": {
                      "line": 97,
                      "column": 55
                    },
                    "end": {
                      "line": 97,
                      "column": 65
                    }
                  }
                },
                "range": [
                  3702,
                  3759
                ],
                "loc": {
                  "start": {
                    "line": 97,
                    "column": 8
                  },
                  "end": {
                    "line": 97,
                    "column": 65
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          3771,
                          3778
                        ],
                        "loc": {
                          "start": {
                            "line": 98,
                            "column": 8
                          },
                          "end": {
                            "line": 98,
                            "column": 15
                          }
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "MemberExpression",
                          "computed": false,
                          "object": {
                            "type": "Identifier",
                            "name": "observables",
                            "range": [
                              3781,
                              3792
                            ],
                            "loc": {
                              "start": {
                                "line": 98,
                                "column": 18
                              },
                              "end": {
                                "line": 98,
                                "column": 29
                              }
                            }
                          },
                          "property": {
                            "type": "Identifier",
                            "name": "pop",
                            "range": [
                              3793,
                              3796
                            ],
                            "loc": {
                              "start": {
                                "line": 98,
                                "column": 30
                              },
                              "end": {
                                "line": 98,
                                "column": 33
                              }
                            }
                          },
                          "range": [
                            3781,
                            3796
                          ],
                          "loc": {
                            "start": {
                              "line": 98,
                              "column": 18
                            },
                            "end": {
                              "line": 98,
                              "column": 33
                            }
                          }
                        },
                        "arguments": [],
                        "range": [
                          3781,
                          3798
                        ],
                        "loc": {
                          "start": {
                            "line": 98,
                            "column": 18
                          },
                          "end": {
                            "line": 98,
                            "column": 35
                          }
                        }
                      },
                      "range": [
                        3771,
                        3798
                      ],
                      "loc": {
                        "start": {
                          "line": 98,
                          "column": 8
                        },
                        "end": {
                          "line": 98,
                          "column": 35
                        }
                      }
                    },
                    "range": [
                      3771,
                      3799
                    ],
                    "loc": {
                      "start": {
                        "line": 98,
                        "column": 8
                      },
                      "end": {
                        "line": 98,
                        "column": 36
                      }
                    }
                  }
                ],
                "range": [
                  3761,
                  3805
                ],
                "loc": {
                  "start": {
                    "line": 97,
                    "column": 67
                  },
                  "end": {
                    "line": 99,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3698,
                3805
              ],
              "loc": {
                "start": {
                  "line": 97,
                  "column": 4
                },
                "end": {
                  "line": 99,
                  "column": 5
                }
              },
              "trailingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    3810,
                    3888
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    3893,
                    3969
                  ],
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 4
                    },
                    "end": {
                      "line": 101,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "IfStatement",
              "test": {
                "type": "LogicalExpression",
                "operator": "&&",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "MemberExpression",
                    "computed": false,
                    "object": {
                      "type": "Identifier",
                      "name": "observables",
                      "range": [
                        3978,
                        3989
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 8
                        },
                        "end": {
                          "line": 102,
                          "column": 19
                        }
                      }
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "length",
                      "range": [
                        3990,
                        3996
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 20
                        },
                        "end": {
                          "line": 102,
                          "column": 26
                        }
                      }
                    },
                    "range": [
                      3978,
                      3996
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 8
                      },
                      "end": {
                        "line": 102,
                        "column": 26
                      }
                    }
                  },
                  "right": {
                    "type": "Literal",
                    "value": 1,
                    "raw": "1",
                    "range": [
                      4001,
                      4002
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 31
                      },
                      "end": {
                        "line": 102,
                        "column": 32
                      }
                    }
                  },
                  "range": [
                    3978,
                    4002
                  ],
                  "loc": {
                    "start": {
                      "line": 102,
                      "column": 8
                    },
                    "end": {
                      "line": 102,
                      "column": 32
                    }
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "isArray",
                    "range": [
                      4006,
                      4013
                    ],
                    "loc": {
                      "start": {
                        "line": 102,
                        "column": 36
                      },
                      "end": {
                        "line": 102,
                        "column": 43
                      }
                    }
                  },
                  "arguments": [
                    {
                      "type": "MemberExpression",
                      "computed": true,
                      "object": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4014,
                          4025
                        ],
                        "loc": {
                          "start": {
                            "line": 102,
                            "column": 44
                          },
                          "end": {
                            "line": 102,
                            "column": 55
                          }
                        }
                      },
                      "property": {
                        "type": "Literal",
                        "value": 0,
                        "raw": "0",
                        "range": [
                          4026,
                          4027
                        ],
                        "loc": {
                          "start": {
                            "line": 102,
                            "column": 56
                          },
                          "end": {
                            "line": 102,
                            "column": 57
                          }
                        }
                      },
                      "range": [
                        4014,
                        4028
                      ],
                      "loc": {
                        "start": {
                          "line": 102,
                          "column": 44
                        },
                        "end": {
                          "line": 102,
                          "column": 58
                        }
                      }
                    }
                  ],
                  "range": [
                    4006,
                    4029
                  ],
                  "loc": {
                    "start": {
                      "line": 102,
                      "column": 36
                    },
                    "end": {
                      "line": 102,
                      "column": 59
                    }
                  }
                },
                "range": [
                  3978,
                  4029
                ],
                "loc": {
                  "start": {
                    "line": 102,
                    "column": 8
                  },
                  "end": {
                    "line": 102,
                    "column": 59
                  }
                }
              },
              "consequent": {
                "type": "BlockStatement",
                "body": [
                  {
                    "type": "ExpressionStatement",
                    "expression": {
                      "type": "AssignmentExpression",
                      "operator": "=",
                      "left": {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4041,
                          4052
                        ],
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 8
                          },
                          "end": {
                            "line": 103,
                            "column": 19
                          }
                        }
                      },
                      "right": {
                        "type": "MemberExpression",
                        "computed": true,
                        "object": {
                          "type": "Identifier",
                          "name": "observables",
                          "range": [
                            4055,
                            4066
                          ],
                          "loc": {
                            "start": {
                              "line": 103,
                              "column": 22
                            },
                            "end": {
                              "line": 103,
                              "column": 33
                            }
                          }
                        },
                        "property": {
                          "type": "Literal",
                          "value": 0,
                          "raw": "0",
                          "range": [
                            4067,
                            4068
                          ],
                          "loc": {
                            "start": {
                              "line": 103,
                              "column": 34
                            },
                            "end": {
                              "line": 103,
                              "column": 35
                            }
                          }
                        },
                        "range": [
                          4055,
                          4069
                        ],
                        "loc": {
                          "start": {
                            "line": 103,
                            "column": 22
                          },
                          "end": {
                            "line": 103,
                            "column": 36
                          }
                        }
                      },
                      "range": [
                        4041,
                        4069
                      ],
                      "loc": {
                        "start": {
                          "line": 103,
                          "column": 8
                        },
                        "end": {
                          "line": 103,
                          "column": 36
                        }
                      }
                    },
                    "range": [
                      4041,
                      4070
                    ],
                    "loc": {
                      "start": {
                        "line": 103,
                        "column": 8
                      },
                      "end": {
                        "line": 103,
                        "column": 37
                      }
                    }
                  }
                ],
                "range": [
                  4031,
                  4076
                ],
                "loc": {
                  "start": {
                    "line": 102,
                    "column": 61
                  },
                  "end": {
                    "line": 104,
                    "column": 5
                  }
                }
              },
              "alternate": null,
              "range": [
                3974,
                4076
              ],
              "loc": {
                "start": {
                  "line": 102,
                  "column": 4
                },
                "end": {
                  "line": 104,
                  "column": 5
                }
              },
              "leadingComments": [
                {
                  "type": "Line",
                  "value": " if the first and only other argument besides the resultSelector is an array",
                  "range": [
                    3810,
                    3888
                  ],
                  "loc": {
                    "start": {
                      "line": 100,
                      "column": 4
                    },
                    "end": {
                      "line": 100,
                      "column": 82
                    }
                  }
                },
                {
                  "type": "Line",
                  "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
                  "range": [
                    3893,
                    3969
                  ],
                  "loc": {
                    "start": {
                      "line": 101,
                      "column": 4
                    },
                    "end": {
                      "line": 101,
                      "column": 80
                    }
                  }
                }
              ]
            },
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "ArrayObservable",
                      "range": [
                        4092,
                        4107
                      ],
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 15
                        },
                        "end": {
                          "line": 105,
                          "column": 30
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "observables",
                        "range": [
                          4108,
                          4119
                        ],
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 31
                          },
                          "end": {
                            "line": 105,
                            "column": 42
                          }
                        }
                      },
                      {
                        "type": "Identifier",
                        "name": "scheduler",
                        "range": [
                          4121,
                          4130
                        ],
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 44
                          },
                          "end": {
                            "line": 105,
                            "column": 53
                          }
                        }
                      }
                    ],
                    "range": [
                      4088,
                      4131
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 11
                      },
                      "end": {
                        "line": 105,
                        "column": 54
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      4132,
                      4136
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 55
                      },
                      "end": {
                        "line": 105,
                        "column": 59
                      }
                    }
                  },
                  "range": [
                    4088,
                    4136
                  ],
                  "loc": {
                    "start": {
                      "line": 105,
                      "column": 11
                    },
                    "end": {
                      "line": 105,
                      "column": 59
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "CombineLatestOperator",
                      "range": [
                        4141,
                        4162
                      ],
                      "loc": {
                        "start": {
                          "line": 105,
                          "column": 64
                        },
                        "end": {
                          "line": 105,
                          "column": 85
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          4163,
                          4170
                        ],
                        "loc": {
                          "start": {
                            "line": 105,
                            "column": 86
                          },
                          "end": {
                            "line": 105,
                            "column": 93
                          }
                        }
                      }
                    ],
                    "range": [
                      4137,
                      4171
                    ],
                    "loc": {
                      "start": {
                        "line": 105,
                        "column": 60
                      },
                      "end": {
                        "line": 105,
                        "column": 94
                      }
                    }
                  }
                ],
                "range": [
                  4088,
                  4172
                ],
                "loc": {
                  "start": {
                    "line": 105,
                    "column": 11
                  },
                  "end": {
                    "line": 105,
                    "column": 95
                  }
                }
              },
              "range": [
                4081,
                4173
              ],
              "loc": {
                "start": {
                  "line": 105,
                  "column": 4
                },
                "end": {
                  "line": 105,
                  "column": 96
                }
              }
            }
          ],
          "range": [
            3537,
            4175
          ],
          "loc": {
            "start": {
              "line": 91,
              "column": 46
            },
            "end": {
              "line": 106,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          3498,
          4175
        ],
        "loc": {
          "start": {
            "line": 91,
            "column": 7
          },
          "end": {
            "line": 106,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              214,
              249
            ],
            "loc": {
              "start": {
                "line": 5,
                "column": 0
              },
              "end": {
                "line": 5,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的。\n *\n * <span class=\"informal\">它将使用所有输入中的最新值计算公式，然后发出该公式的输出。</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` 结合所有输入 Observable 参数的值. 顺序订阅每个 Observable，\n * 每当任一输入 Observable 发出，收集每个输入 Observable 的最新值组成一个数组。所以，当你给操作符\n * 传入 n 个 Observable，返回的 Observable 总是会发出一个长度为 n 的数组，对应输入 Observable\n * 的顺序（第一个 Observable 的值放到数组的第一个）。\n *\n * 静态版本的 `combineLatest` 接受一个 Observables 数组或者每个 Observable 可以直接作为参数。\n * 请注意，如果你事先不知道你将要结合多少个 Observable， 那么 Observables 数组是一个好的选择。\n * 传递空的数组将会导致返回 Observable 立马完成。\n *\n * 为了保证输出数组的长度相同，`combineLatest` 实际上会等待所有的输入 Observable 至少发出一次，\n * 在返回 Observable 发出之前。这意味着如果某个输入 Observable 在其余的输入 Observable 之前发出，它所发出\n * 的值只保留最新的。另一方面，如果某个输入 Observable 没有发出值就完成了，返回 Observable 也不会发\n * 射值并立马完成，因为不可能从已经完成的 Observable 中收集到值。同样的，如果某个输入 Observable\n * 不发出值也不完成，`combineLatest`会永远不发出值也不结束。所以，再次强调下，它会等待所有的流\n * 去发出值。\n *\n * 如果给`combineLatest`至少传递一个输入 Observable 并且所有传入的输入 Observable 都发出了值，返回\n * Observable 将会在所有结合流完成后完成。所以即使某些 Observable 完成了，当其他输入 Observable\n * 发出值的时候，combineLatest返回 Observable 仍然会发出值。对于完成的输入 Observable，它\n * 的值一直是最后发出的值。另一方面，如果任一输入 Observable 发生错误，`combineLatest`也会\n * 立马触发错误状态，所有的其他输入 Observable 都会被解除订阅。\n *\n * `combineLatest`接受一个可选的参数投射函数，它接受返回 Observable 发出的值。投射函数\n * 可以返回任何数据，这些数据代替默认的数组被返回 Observable 发出。需要注意的是，投射函数并不接\n * 受值的数组，而是值本身。这意味着默认的投射函数就是一个接受所有参数并把它们放到一个数组里面的\n * 函数。\n *\n * @example <caption>结合两个 timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // 从现在开始，每隔1秒发出0, 1, 2...\n * const secondTimer = Rx.Observable.timer(500, 1000); // 0.5秒后，每隔1秒发出0, 1, 2...\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>结合 Observables 数组</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // 先发出0，然后在 n 秒后发出 n。\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // 日志\n * // [0, 0, 0] 立刻\n * // [1, 0, 0] 1s 后\n * // [1, 5, 0] 5s 后\n * // [1, 5, 10] 10s 后\n *\n *\n * @example <caption>使用 project 函数动态计算体重指数</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // 控制台输出:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 用来和其他 Observables 进行结合的输入 Observable 。\n * @param {ObservableInput} observable2 用来和其他 Observables 进行结合的输入 Observable 。\n * 可以有多个输入Observables传入或者第一个参数是Observables数组\n * @param {function} [project] 投射成输出 Observable 上的一个新的值。\n * @param {Scheduler} [scheduler=null] 用来订阅每个输入 Observable 的调度器。\n * @return {Observable} 该 Observable 为每个输入 Observable 的最新值的投射，或者每个输入 Observable 的最新值的数组。\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
            "range": [
              250,
              3490
            ],
            "loc": {
              "start": {
                "line": 6,
                "column": 0
              },
              "end": {
                "line": 90,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=combineLatest.js.map",
            "range": [
              4176,
              4217
            ],
            "loc": {
              "start": {
                "line": 107,
                "column": 0
              },
              "end": {
                "line": 107,
                "column": 41
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        3491,
        4175
      ],
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 106,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            214,
            249
          ],
          "loc": {
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的。\n *\n * <span class=\"informal\">它将使用所有输入中的最新值计算公式，然后发出该公式的输出。</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` 结合所有输入 Observable 参数的值. 顺序订阅每个 Observable，\n * 每当任一输入 Observable 发出，收集每个输入 Observable 的最新值组成一个数组。所以，当你给操作符\n * 传入 n 个 Observable，返回的 Observable 总是会发出一个长度为 n 的数组，对应输入 Observable\n * 的顺序（第一个 Observable 的值放到数组的第一个）。\n *\n * 静态版本的 `combineLatest` 接受一个 Observables 数组或者每个 Observable 可以直接作为参数。\n * 请注意，如果你事先不知道你将要结合多少个 Observable， 那么 Observables 数组是一个好的选择。\n * 传递空的数组将会导致返回 Observable 立马完成。\n *\n * 为了保证输出数组的长度相同，`combineLatest` 实际上会等待所有的输入 Observable 至少发出一次，\n * 在返回 Observable 发出之前。这意味着如果某个输入 Observable 在其余的输入 Observable 之前发出，它所发出\n * 的值只保留最新的。另一方面，如果某个输入 Observable 没有发出值就完成了，返回 Observable 也不会发\n * 射值并立马完成，因为不可能从已经完成的 Observable 中收集到值。同样的，如果某个输入 Observable\n * 不发出值也不完成，`combineLatest`会永远不发出值也不结束。所以，再次强调下，它会等待所有的流\n * 去发出值。\n *\n * 如果给`combineLatest`至少传递一个输入 Observable 并且所有传入的输入 Observable 都发出了值，返回\n * Observable 将会在所有结合流完成后完成。所以即使某些 Observable 完成了，当其他输入 Observable\n * 发出值的时候，combineLatest返回 Observable 仍然会发出值。对于完成的输入 Observable，它\n * 的值一直是最后发出的值。另一方面，如果任一输入 Observable 发生错误，`combineLatest`也会\n * 立马触发错误状态，所有的其他输入 Observable 都会被解除订阅。\n *\n * `combineLatest`接受一个可选的参数投射函数，它接受返回 Observable 发出的值。投射函数\n * 可以返回任何数据，这些数据代替默认的数组被返回 Observable 发出。需要注意的是，投射函数并不接\n * 受值的数组，而是值本身。这意味着默认的投射函数就是一个接受所有参数并把它们放到一个数组里面的\n * 函数。\n *\n * @example <caption>结合两个 timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // 从现在开始，每隔1秒发出0, 1, 2...\n * const secondTimer = Rx.Observable.timer(500, 1000); // 0.5秒后，每隔1秒发出0, 1, 2...\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>结合 Observables 数组</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // 先发出0，然后在 n 秒后发出 n。\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // 日志\n * // [0, 0, 0] 立刻\n * // [1, 0, 0] 1s 后\n * // [1, 5, 0] 5s 后\n * // [1, 5, 10] 10s 后\n *\n *\n * @example <caption>使用 project 函数动态计算体重指数</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // 控制台输出:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 用来和其他 Observables 进行结合的输入 Observable 。\n * @param {ObservableInput} observable2 用来和其他 Observables 进行结合的输入 Observable 。\n * 可以有多个输入Observables传入或者第一个参数是Observables数组\n * @param {function} [project] 投射成输出 Observable 上的一个新的值。\n * @param {Scheduler} [scheduler=null] 用来订阅每个输入 Observable 的调度器。\n * @return {Observable} 该 Observable 为每个输入 Observable 的最新值的投射，或者每个输入 Observable 的最新值的数组。\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
          "range": [
            250,
            3490
          ],
          "loc": {
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 90,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=combineLatest.js.map",
          "range": [
            4176,
            4217
          ],
          "loc": {
            "start": {
              "line": 107,
              "column": 0
            },
            "end": {
              "line": 107,
              "column": 41
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    4175
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 106,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        214,
        249
      ],
      "loc": {
        "start": {
          "line": 5,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 组合多个 Observables 来创建一个 Observable ，该 Observable 的值根据每个输入 Observable 的最新值计算得出的。\n *\n * <span class=\"informal\">它将使用所有输入中的最新值计算公式，然后发出该公式的输出。</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` 结合所有输入 Observable 参数的值. 顺序订阅每个 Observable，\n * 每当任一输入 Observable 发出，收集每个输入 Observable 的最新值组成一个数组。所以，当你给操作符\n * 传入 n 个 Observable，返回的 Observable 总是会发出一个长度为 n 的数组，对应输入 Observable\n * 的顺序（第一个 Observable 的值放到数组的第一个）。\n *\n * 静态版本的 `combineLatest` 接受一个 Observables 数组或者每个 Observable 可以直接作为参数。\n * 请注意，如果你事先不知道你将要结合多少个 Observable， 那么 Observables 数组是一个好的选择。\n * 传递空的数组将会导致返回 Observable 立马完成。\n *\n * 为了保证输出数组的长度相同，`combineLatest` 实际上会等待所有的输入 Observable 至少发出一次，\n * 在返回 Observable 发出之前。这意味着如果某个输入 Observable 在其余的输入 Observable 之前发出，它所发出\n * 的值只保留最新的。另一方面，如果某个输入 Observable 没有发出值就完成了，返回 Observable 也不会发\n * 射值并立马完成，因为不可能从已经完成的 Observable 中收集到值。同样的，如果某个输入 Observable\n * 不发出值也不完成，`combineLatest`会永远不发出值也不结束。所以，再次强调下，它会等待所有的流\n * 去发出值。\n *\n * 如果给`combineLatest`至少传递一个输入 Observable 并且所有传入的输入 Observable 都发出了值，返回\n * Observable 将会在所有结合流完成后完成。所以即使某些 Observable 完成了，当其他输入 Observable\n * 发出值的时候，combineLatest返回 Observable 仍然会发出值。对于完成的输入 Observable，它\n * 的值一直是最后发出的值。另一方面，如果任一输入 Observable 发生错误，`combineLatest`也会\n * 立马触发错误状态，所有的其他输入 Observable 都会被解除订阅。\n *\n * `combineLatest`接受一个可选的参数投射函数，它接受返回 Observable 发出的值。投射函数\n * 可以返回任何数据，这些数据代替默认的数组被返回 Observable 发出。需要注意的是，投射函数并不接\n * 受值的数组，而是值本身。这意味着默认的投射函数就是一个接受所有参数并把它们放到一个数组里面的\n * 函数。\n *\n * @example <caption>结合两个 timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // 从现在开始，每隔1秒发出0, 1, 2...\n * const secondTimer = Rx.Observable.timer(500, 1000); // 0.5秒后，每隔1秒发出0, 1, 2...\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>结合 Observables 数组</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // 先发出0，然后在 n 秒后发出 n。\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // 日志\n * // [0, 0, 0] 立刻\n * // [1, 0, 0] 1s 后\n * // [1, 5, 0] 5s 后\n * // [1, 5, 10] 10s 后\n *\n *\n * @example <caption>使用 project 函数动态计算体重指数</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // 控制台输出:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 用来和其他 Observables 进行结合的输入 Observable 。\n * @param {ObservableInput} observable2 用来和其他 Observables 进行结合的输入 Observable 。\n * 可以有多个输入Observables传入或者第一个参数是Observables数组\n * @param {function} [project] 投射成输出 Observable 上的一个新的值。\n * @param {Scheduler} [scheduler=null] 用来订阅每个输入 Observable 的调度器。\n * @return {Observable} 该 Observable 为每个输入 Observable 的最新值的投射，或者每个输入 Observable 的最新值的数组。\n * @static true\n * @name combineLatest\n * @owner Observable\n ",
      "range": [
        250,
        3490
      ],
      "loc": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 90,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": " if the first and only other argument besides the resultSelector is an array",
      "range": [
        3810,
        3888
      ],
      "loc": {
        "start": {
          "line": 100,
          "column": 4
        },
        "end": {
          "line": 100,
          "column": 82
        }
      }
    },
    {
      "type": "Line",
      "value": " assume it's been called with `combineLatest([obs1, obs2, obs3], project)`",
      "range": [
        3893,
        3969
      ],
      "loc": {
        "start": {
          "line": 101,
          "column": 4
        },
        "end": {
          "line": 101,
          "column": 80
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=combineLatest.js.map",
      "range": [
        4176,
        4217
      ],
      "loc": {
        "start": {
          "line": 107,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 41
        }
      }
    }
  ]
}