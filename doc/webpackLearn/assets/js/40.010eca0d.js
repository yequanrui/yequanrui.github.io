(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{90:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"_3-16-检查代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-16-检查代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 3-16 检查代码")]),a("p",[t._v("当项目代码变得日益庞大复杂时，如何保障代码质量？如何保障多人协助开发时代码的可读性？")]),a("p",[t._v("完全解决以上问题不是一个简单的事，但做检查代码能解决大部分问题。本节将教你如何结合构建做代码检查。")]),a("h2",{attrs:{id:"代码检查具体是做什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码检查具体是做什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码检查具体是做什么")]),a("p",[t._v("检查代码和 Code Review 很相似，都是去审视提交的代码可能存在的问题。 但 Code Review 一般通过人去执行，而检查代码是通过机器去执行一些自动化的检查。 自动化的检查代码成本更低，实施代价更小。")]),a("p",[t._v("检查代码主要检查以下几项：")]),a("ul",[a("li",[t._v("代码风格：让项目成员强制遵守统一的代码风格，例如如何缩紧、如何写注释等，保障代码可读性，不把时间浪费在争论如何写代码更好看上；")]),a("li",[t._v("潜在问题：分析出代码在运行过程中可能出现的潜在 Bug。")])]),a("p",[t._v("其中检查代码风格相关的工具很多也很成熟，分析潜在问题的检查由于情况复杂目前还没有成熟的工具。")]),a("p",[t._v("目前已经有成熟的工具可以检验诸如 "),a("code",[t._v("JavaScript")]),t._v("、"),a("code",[t._v("TypeScript")]),t._v("、"),a("code",[t._v("CSS")]),t._v("、"),a("code",[t._v("SCSS")]),t._v(" 等常用语言。")]),a("h2",{attrs:{id:"怎么做代码检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#怎么做代码检查","aria-hidden":"true"}},[t._v("#")]),t._v(" 怎么做代码检查")]),a("p",[t._v("在做代码风格检查时需要按照不同的文件类型来检查，下面来分别介绍。")]),a("h3",{attrs:{id:"检查-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-javascript","aria-hidden":"true"}},[t._v("#")]),t._v(" 检查 JavaScript")]),a("p",[t._v("目前最常用的 JavaScript 检查工具是 "),a("code",[t._v("ESlint")]),t._v(" ，它不仅内置了大量常用的检查规则，还可以通过插件机制做到灵活扩展。")]),a("p",[t._v("ESlint 的使用很简单，在通过")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -g eslint\n")])])]),a("p",[t._v("按照到全局后，再在项目目录下执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("eslint init\n")])])]),a("p",[t._v("来新建一个 ESlint 配置文件 "),a("code",[t._v(".eslintrc")]),t._v("，该文件格式为 JSON。")]),a("p",[t._v("如果你想覆盖默认的检查规则，或者想加入新的检查规则，你需要修改该文件，例如使用以下配置：")]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从 eslint:recommended 中继承所有检查规则")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint:recommended"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再自定义一些规则")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要在每行结尾加 ;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"semi"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"always"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 需要使用 ")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" 包裹字符串\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"quotes"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"double"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("写好配置文件后，再执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("eslint yourfile.js\n")])])]),a("p",[t._v("去检查 "),a("code",[t._v("yourfile.js")]),t._v(" 文件，如果你的文件没有通过检查，ESlint 会输出错误原因，例如：")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("/yourfile.js\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("296")]),t._v(":13  error  Strings must use doublequote  quotes\n   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("298")]),t._v(":7   error  Missing semicolon             semi\n\n✖ "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" problems "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" errors, "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" warnings"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("ESlint 还有很多功能和检查规则，由于篇幅有限这里就不详细介绍，可以去其官网阅读文档。")]),a("h3",{attrs:{id:"检查-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-typescript","aria-hidden":"true"}},[t._v("#")]),t._v(" 检查 TypeScript")]),a("p",[t._v("TSLint 是一个和 ESlint 相似的 TypeScript 代码检查工具，区别在于 TSLint 只专注于检查 TypeScript 代码。")]),a("p",[t._v("TSLint 和 ESlint 的使用方法很相似，首先通过")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -g tslint\n")])])]),a("p",[t._v("按照到全局，再去项目根目录下执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("tslint --init\n")])])]),a("p",[t._v("生成配置文件 "),a("code",[t._v("tslint.json")]),t._v("，在配置好后，再执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("tslint yourfile.ts\n")])])]),a("p",[t._v("去检查 "),a("code",[t._v("yourfile.ts")]),t._v(" 文件。")]),a("h3",{attrs:{id:"检查-css"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查-css","aria-hidden":"true"}},[t._v("#")]),t._v(" 检查 CSS")]),a("p",[a("code",[t._v("stylelint")]),t._v(" 是目前最成熟的 CSS 检查工具，内置了大量检查规则的同时也提供插件机制让用户自定义扩展。 "),a("code",[t._v("stylelint")]),t._v(" 基于 PostCSS，能检查任何 PostCSS 能解析的代码，诸如 "),a("code",[t._v("SCSS")]),t._v("、"),a("code",[t._v("Less")]),t._v(" 等。")]),a("p",[t._v("首先通过")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -g stylelint\n")])])]),a("p",[t._v("按照到全局后，去项目根目录下新建 "),a("code",[t._v(".stylelintrc")]),t._v(" 配置文件， 该配置文件格式为 JSON，其格式和 ESLint 的配置相似，例如：")]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承 stylelint-config-standard 中的所有检查规则")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stylelint-config-standard"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 再自定义检查规则")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"rules"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"at-rule-empty-line-before"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token null keyword"}},[t._v("null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("配置好后，再执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("stylelint "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yourfile.css"')]),t._v("\n")])])]),a("p",[t._v("去检查 "),a("code",[t._v("yourfile.css")]),t._v(" 文件。")]),a("p",[a("code",[t._v("stylelint")]),t._v(" 还有很多功能和配置项没有介绍到，可以访问其官方进一步了解。")]),a("p",[t._v("目前很多编辑器，例如 Webstorm、VSCode 等，已经集成了以上介绍过的检查工具，编辑器会实时地把检查工具输出的错误显示编辑的源码上。 通过编辑器集成后，你不用通过命令行的方式去定位错误。")]),a("h2",{attrs:{id:"结合-webpack-检查代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合-webpack-检查代码","aria-hidden":"true"}},[t._v("#")]),t._v(" 结合 Webpack 检查代码")]),a("p",[t._v("以上介绍的代码检查工具可以和 Webpack 结合起来，在开发过程中通过 Webpack 输出实时的检查结果。")]),a("h3",{attrs:{id:"结合-eslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合-eslint","aria-hidden":"true"}},[t._v("#")]),t._v(" 结合 ESLint")]),a("p",[a("code",[t._v("eslint-loader")]),t._v(" 可以方便的把 ESLint 整合到 Webpack 中，使用方法如下：")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.js$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// node_modules 目录的下的代码不用检查")]),t._v("\n        exclude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/node_modules/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        loader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint-loader"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 eslint-loader 的执行顺序放到最前面，防止其它 Loader 把处理后的代码交给 eslint-loader 去检查")]),t._v("\n        enforce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("接入 "),a("code",[t._v("eslint-loader")]),t._v(" 后就能在控制台中看到 ESLint 输出的错误日志了。")]),a("h3",{attrs:{id:"结合-tslint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合-tslint","aria-hidden":"true"}},[t._v("#")]),t._v(" 结合 TSLint")]),a("p",[a("code",[t._v("tslint-loader")]),t._v(" 是一个和 "),a("code",[t._v("eslint-loader")]),t._v(" 相似的 Webpack Loader， 能方便的把 TSLint 整合到 Webpack，其使用方法如下：")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rules"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        test"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.js$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// node_modules 目录的下的代码不用检查")]),t._v("\n        exclude"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/node_modules/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        loader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"tslint-loader"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 把 tslint-loader 的执行顺序放到最前面，防止其它 Loader 把处理后的代码交给 tslint-loader 去检查")]),t._v("\n        enforce"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre"')]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"结合-stylelint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结合-stylelint","aria-hidden":"true"}},[t._v("#")]),t._v(" 结合 stylelint")]),a("p",[a("code",[t._v("StyleLintPlugin")]),t._v(" 能把 stylelint 整合到 Webpack，其使用方法很简单，如下：")]),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" StyleLintPlugin "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"stylelint-webpack-plugin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmodule"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  plugins"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StyleLintPlugin")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"一些建议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些建议","aria-hidden":"true"}},[t._v("#")]),t._v(" 一些建议")]),a("p",[t._v("把代码检查功能整合到 Webpack 中会导致以下问题：")]),a("ul",[a("li",[t._v("由于执行检查步骤计算量大，整合到 Webpack 中会导致构建变慢；")]),a("li",[t._v("在整合代码检查到 Webpack 后，输出的错误信息是通过行号来定位错误的，没有编辑器集成显示错误直观；")])]),a("p",[t._v("为了避免以上问题，还可以这样做：")]),a("ul",[a("li",[t._v("使用集成了代码检查功能的编辑器，让编辑器实时直观地显示错误；")]),a("li",[t._v("把代码检查步骤放到代码提交时，也就是说在代码提交前去调用以上检查工具去检查代码，只有在检查都通过时才提交代码，这样就能保证提交到仓库的代码都是通过了检查的。")])]),a("p",[t._v("如果你的项目是使用 "),a("code",[t._v("Git")]),t._v(" 管理，Git 提供了 Hook 功能能做到在提交代码前触发执行脚本。")]),a("p",[a("code",[t._v("husky")]),t._v(" 可以方便快速地为项目接入 Git Hook， 执行")]),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" i -D husky\n")])])]),a("p",[t._v("安装 husky 时，husky 会通过 "),a("code",[t._v("Npm Script Hook")]),t._v(" 自动配置好 Git Hook，你需要做的只是在 "),a("code",[t._v("package.json")]),t._v(" 文件中定义几个脚本，方法如下：")]),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在执行 git commit 前会执行的脚本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"precommit"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"npm run lint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在执行 git push 前会执行的脚本")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"prepush"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用 eslint、stylelint 等工具检查代码")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"lint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"eslint && stylelint"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("precommit")]),t._v(" 和 "),a("code",[t._v("prepush")]),t._v(" 你需要根据自己的情况选择一个，无需两个都设置。")])])}],!1,null,null,null);s.default=e.exports}}]);