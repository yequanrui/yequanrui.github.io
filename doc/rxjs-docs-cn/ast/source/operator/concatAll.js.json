{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "MergeAllOperator",
            "range": [
              9,
              25
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 25
              }
            }
          },
          "range": [
            9,
            25
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 25
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./mergeAll",
        "raw": "'./mergeAll'",
        "range": [
          33,
          45
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 33
          },
          "end": {
            "line": 1,
            "column": 45
          }
        }
      },
      "range": [
        0,
        46
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 46
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            47,
            82
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable 。\n *\n * <span class=\"informal\">通过一个接一个的连接内部 Observable ，将高阶 Observable 打平。</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * 串行连接源(高阶 Observable)所发出的每个 Observable，只有当一个内部 Observable 完成的时候才订阅下\n * 一个内部 Observable，并将它们的所有值合并到返回的 Observable 中。\n *\n * 警告: 如果源 Observable 很快并且不停的发送 Observables, 内部 Observables 发送的完成\n * 通知比源 Observable 慢, 你会遇到内存问题，因为传入的 Observables 在无界缓冲区中收集.\n *\n * 注意: concatAll 等价于 concurrency 参数(最大并发数)为1的 mergeAll 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} Observable，该 Observable 串联地发出所有内部 Observables 的值。\n * @method concatAll\n * @owner Observable\n ",
          "range": [
            83,
            1347
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "concatAll",
          "range": [
            1364,
            1373
          ],
          "loc": {
            "start": {
              "line": 42,
              "column": 16
            },
            "end": {
              "line": 42,
              "column": 25
            }
          }
        },
        "params": [],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      1389,
                      1393
                    ],
                    "loc": {
                      "start": {
                        "line": 43,
                        "column": 11
                      },
                      "end": {
                        "line": 43,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1394,
                      1398
                    ],
                    "loc": {
                      "start": {
                        "line": 43,
                        "column": 16
                      },
                      "end": {
                        "line": 43,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    1389,
                    1398
                  ],
                  "loc": {
                    "start": {
                      "line": 43,
                      "column": 11
                    },
                    "end": {
                      "line": 43,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "MergeAllOperator",
                      "range": [
                        1403,
                        1419
                      ],
                      "loc": {
                        "start": {
                          "line": 43,
                          "column": 25
                        },
                        "end": {
                          "line": 43,
                          "column": 41
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Literal",
                        "value": 1,
                        "raw": "1",
                        "range": [
                          1420,
                          1421
                        ],
                        "loc": {
                          "start": {
                            "line": 43,
                            "column": 42
                          },
                          "end": {
                            "line": 43,
                            "column": 43
                          }
                        }
                      }
                    ],
                    "range": [
                      1399,
                      1422
                    ],
                    "loc": {
                      "start": {
                        "line": 43,
                        "column": 21
                      },
                      "end": {
                        "line": 43,
                        "column": 44
                      }
                    }
                  }
                ],
                "range": [
                  1389,
                  1423
                ],
                "loc": {
                  "start": {
                    "line": 43,
                    "column": 11
                  },
                  "end": {
                    "line": 43,
                    "column": 45
                  }
                }
              },
              "range": [
                1382,
                1424
              ],
              "loc": {
                "start": {
                  "line": 43,
                  "column": 4
                },
                "end": {
                  "line": 43,
                  "column": 46
                }
              }
            }
          ],
          "range": [
            1376,
            1426
          ],
          "loc": {
            "start": {
              "line": 42,
              "column": 28
            },
            "end": {
              "line": 44,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1355,
          1426
        ],
        "loc": {
          "start": {
            "line": 42,
            "column": 7
          },
          "end": {
            "line": 44,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": " tslint:enable:max-line-length ",
            "range": [
              47,
              82
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 2,
                "column": 35
              }
            }
          },
          {
            "type": "Block",
            "value": "*\n * 通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable 。\n *\n * <span class=\"informal\">通过一个接一个的连接内部 Observable ，将高阶 Observable 打平。</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * 串行连接源(高阶 Observable)所发出的每个 Observable，只有当一个内部 Observable 完成的时候才订阅下\n * 一个内部 Observable，并将它们的所有值合并到返回的 Observable 中。\n *\n * 警告: 如果源 Observable 很快并且不停的发送 Observables, 内部 Observables 发送的完成\n * 通知比源 Observable 慢, 你会遇到内存问题，因为传入的 Observables 在无界缓冲区中收集.\n *\n * 注意: concatAll 等价于 concurrency 参数(最大并发数)为1的 mergeAll 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} Observable，该 Observable 串联地发出所有内部 Observables 的值。\n * @method concatAll\n * @owner Observable\n ",
            "range": [
              83,
              1347
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 41,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=concatAll.js.map",
            "range": [
              1427,
              1464
            ],
            "loc": {
              "start": {
                "line": 45,
                "column": 0
              },
              "end": {
                "line": 45,
                "column": 37
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1348,
        1426
      ],
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 44,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": " tslint:enable:max-line-length ",
          "range": [
            47,
            82
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 35
            }
          }
        },
        {
          "type": "Block",
          "value": "*\n * 通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable 。\n *\n * <span class=\"informal\">通过一个接一个的连接内部 Observable ，将高阶 Observable 打平。</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * 串行连接源(高阶 Observable)所发出的每个 Observable，只有当一个内部 Observable 完成的时候才订阅下\n * 一个内部 Observable，并将它们的所有值合并到返回的 Observable 中。\n *\n * 警告: 如果源 Observable 很快并且不停的发送 Observables, 内部 Observables 发送的完成\n * 通知比源 Observable 慢, 你会遇到内存问题，因为传入的 Observables 在无界缓冲区中收集.\n *\n * 注意: concatAll 等价于 concurrency 参数(最大并发数)为1的 mergeAll 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} Observable，该 Observable 串联地发出所有内部 Observables 的值。\n * @method concatAll\n * @owner Observable\n ",
          "range": [
            83,
            1347
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=concatAll.js.map",
          "range": [
            1427,
            1464
          ],
          "loc": {
            "start": {
              "line": 45,
              "column": 0
            },
            "end": {
              "line": 45,
              "column": 37
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1426
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 44,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": " tslint:enable:max-line-length ",
      "range": [
        47,
        82
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 35
        }
      }
    },
    {
      "type": "Block",
      "value": "*\n * 通过顺序地连接内部 Observable，将高阶 Observable 转化为一阶 Observable 。\n *\n * <span class=\"informal\">通过一个接一个的连接内部 Observable ，将高阶 Observable 打平。</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * 串行连接源(高阶 Observable)所发出的每个 Observable，只有当一个内部 Observable 完成的时候才订阅下\n * 一个内部 Observable，并将它们的所有值合并到返回的 Observable 中。\n *\n * 警告: 如果源 Observable 很快并且不停的发送 Observables, 内部 Observables 发送的完成\n * 通知比源 Observable 慢, 你会遇到内存问题，因为传入的 Observables 在无界缓冲区中收集.\n *\n * 注意: concatAll 等价于 concurrency 参数(最大并发数)为1的 mergeAll 。\n *\n * @example <caption>每次点击都会触发从0到3的定时器(时间间隔为1秒)，定时器之间是串行的</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // 结果如下:\n * // (结果是串行的)\n * // 对于\"document\"对象上的点击事件，都会以1秒的间隔发出从0到3的值\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} Observable，该 Observable 串联地发出所有内部 Observables 的值。\n * @method concatAll\n * @owner Observable\n ",
      "range": [
        83,
        1347
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=concatAll.js.map",
      "range": [
        1427,
        1464
      ],
      "loc": {
        "start": {
          "line": 45,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 37
        }
      }
    }
  ]
}