{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "QueueAction",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "QueueAction",
            "range": [
              9,
              20
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 20
              }
            }
          },
          "range": [
            9,
            20
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 20
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./QueueAction",
        "raw": "'./QueueAction'",
        "range": [
          28,
          43
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 28
          },
          "end": {
            "line": 1,
            "column": 43
          }
        }
      },
      "range": [
        0,
        44
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 44
        }
      }
    },
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "QueueScheduler",
            "range": [
              54,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 23
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "QueueScheduler",
            "range": [
              54,
              68
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 9
              },
              "end": {
                "line": 2,
                "column": 23
              }
            }
          },
          "range": [
            54,
            68
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 9
            },
            "end": {
              "line": 2,
              "column": 23
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./QueueScheduler",
        "raw": "'./QueueScheduler'",
        "range": [
          76,
          94
        ],
        "loc": {
          "start": {
            "line": 2,
            "column": 31
          },
          "end": {
            "line": 2,
            "column": 49
          }
        }
      },
      "range": [
        45,
        95
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 2,
          "column": 50
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n *\n * 队列调度器\n *\n * <span class=\"informal\">将每个任务都放到队列里，而不是立刻执行它们</span>\n *\n * `queue` 调度器, 当和延时一起使用的时候, 和 {@link async} 调度器行为一样。\n *\n * 当和延时一起使用， 它同步地调用当前任务，即调度的时候执行。然而当递归调用的时候，即在调度的任务内，\n * 另一个任务由调度队列调度，而不是立即执行，该任务将被放在队列中，等待当前一个完成。\n *\n * 这意味着当你用 `queue` 调度程序执行任务时，你确信它会在调度程序启动之前的任何其他任务结束之前结束。\n *\n * @examples <caption>首先递归调度, 然后做一些事情</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // 不会立马执行，但是会放到队列里\n *\n *   console.log('first');\n * });\n *\n * // 日志:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>递归的重新调度自身</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` 指向当前执行的 Action,\n *                               // 我们使用新的状态重新调度\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // 递归运行的调度器， 你的期望:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // 但实际使用队列的输入:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n ",
          "range": [
            96,
            1284
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "queue",
              "range": [
                1298,
                1303
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 13
                },
                "end": {
                  "line": 61,
                  "column": 18
                }
              }
            },
            "init": {
              "type": "NewExpression",
              "callee": {
                "type": "Identifier",
                "name": "QueueScheduler",
                "range": [
                  1310,
                  1324
                ],
                "loc": {
                  "start": {
                    "line": 61,
                    "column": 25
                  },
                  "end": {
                    "line": 61,
                    "column": 39
                  }
                }
              },
              "arguments": [
                {
                  "type": "Identifier",
                  "name": "QueueAction",
                  "range": [
                    1325,
                    1336
                  ],
                  "loc": {
                    "start": {
                      "line": 61,
                      "column": 40
                    },
                    "end": {
                      "line": 61,
                      "column": 51
                    }
                  }
                }
              ],
              "range": [
                1306,
                1337
              ],
              "loc": {
                "start": {
                  "line": 61,
                  "column": 21
                },
                "end": {
                  "line": 61,
                  "column": 52
                }
              }
            },
            "range": [
              1298,
              1337
            ],
            "loc": {
              "start": {
                "line": 61,
                "column": 13
              },
              "end": {
                "line": 61,
                "column": 52
              }
            }
          }
        ],
        "kind": "const",
        "range": [
          1292,
          1338
        ],
        "loc": {
          "start": {
            "line": 61,
            "column": 7
          },
          "end": {
            "line": 61,
            "column": 53
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n *\n * 队列调度器\n *\n * <span class=\"informal\">将每个任务都放到队列里，而不是立刻执行它们</span>\n *\n * `queue` 调度器, 当和延时一起使用的时候, 和 {@link async} 调度器行为一样。\n *\n * 当和延时一起使用， 它同步地调用当前任务，即调度的时候执行。然而当递归调用的时候，即在调度的任务内，\n * 另一个任务由调度队列调度，而不是立即执行，该任务将被放在队列中，等待当前一个完成。\n *\n * 这意味着当你用 `queue` 调度程序执行任务时，你确信它会在调度程序启动之前的任何其他任务结束之前结束。\n *\n * @examples <caption>首先递归调度, 然后做一些事情</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // 不会立马执行，但是会放到队列里\n *\n *   console.log('first');\n * });\n *\n * // 日志:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>递归的重新调度自身</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` 指向当前执行的 Action,\n *                               // 我们使用新的状态重新调度\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // 递归运行的调度器， 你的期望:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // 但实际使用队列的输入:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n ",
            "range": [
              96,
              1284
            ],
            "loc": {
              "start": {
                "line": 3,
                "column": 0
              },
              "end": {
                "line": 60,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=queue.js.map",
            "range": [
              1339,
              1372
            ],
            "loc": {
              "start": {
                "line": 62,
                "column": 0
              },
              "end": {
                "line": 62,
                "column": 33
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1285,
        1338
      ],
      "loc": {
        "start": {
          "line": 61,
          "column": 0
        },
        "end": {
          "line": 61,
          "column": 53
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n *\n * 队列调度器\n *\n * <span class=\"informal\">将每个任务都放到队列里，而不是立刻执行它们</span>\n *\n * `queue` 调度器, 当和延时一起使用的时候, 和 {@link async} 调度器行为一样。\n *\n * 当和延时一起使用， 它同步地调用当前任务，即调度的时候执行。然而当递归调用的时候，即在调度的任务内，\n * 另一个任务由调度队列调度，而不是立即执行，该任务将被放在队列中，等待当前一个完成。\n *\n * 这意味着当你用 `queue` 调度程序执行任务时，你确信它会在调度程序启动之前的任何其他任务结束之前结束。\n *\n * @examples <caption>首先递归调度, 然后做一些事情</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // 不会立马执行，但是会放到队列里\n *\n *   console.log('first');\n * });\n *\n * // 日志:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>递归的重新调度自身</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` 指向当前执行的 Action,\n *                               // 我们使用新的状态重新调度\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // 递归运行的调度器， 你的期望:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // 但实际使用队列的输入:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n ",
          "range": [
            96,
            1284
          ],
          "loc": {
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 60,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=queue.js.map",
          "range": [
            1339,
            1372
          ],
          "loc": {
            "start": {
              "line": 62,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 33
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1338
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 61,
      "column": 53
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n *\n * 队列调度器\n *\n * <span class=\"informal\">将每个任务都放到队列里，而不是立刻执行它们</span>\n *\n * `queue` 调度器, 当和延时一起使用的时候, 和 {@link async} 调度器行为一样。\n *\n * 当和延时一起使用， 它同步地调用当前任务，即调度的时候执行。然而当递归调用的时候，即在调度的任务内，\n * 另一个任务由调度队列调度，而不是立即执行，该任务将被放在队列中，等待当前一个完成。\n *\n * 这意味着当你用 `queue` 调度程序执行任务时，你确信它会在调度程序启动之前的任何其他任务结束之前结束。\n *\n * @examples <caption>首先递归调度, 然后做一些事情</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // 不会立马执行，但是会放到队列里\n *\n *   console.log('first');\n * });\n *\n * // 日志:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>递归的重新调度自身</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` 指向当前执行的 Action,\n *                               // 我们使用新的状态重新调度\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // 递归运行的调度器， 你的期望:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // 但实际使用队列的输入:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n ",
      "range": [
        96,
        1284
      ],
      "loc": {
        "start": {
          "line": 3,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=queue.js.map",
      "range": [
        1339,
        1372
      ],
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 62,
          "column": 33
        }
      }
    }
  ]
}