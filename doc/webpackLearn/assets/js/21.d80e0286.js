(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{117:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),e("p",[t._v("Webpack 启动后会从配置的 Entry 出发，解析出文件中的导入语句，再递归的解析。 在遇到导入语句时 Webpack 会做两件事情：")]),t._m(1),e("p",[t._v("以上两件事情虽然对于处理一个文件非常快，但是当项目大了以后文件量会变的非常多，这时候构建速度慢的问题就会暴露出来。 虽然以上两件事情无法避免，但需要尽量减少以上两件事情的发生，以提高速度。")]),e("p",[t._v("接下来一一介绍可以优化它们的途径。")]),t._m(2),e("p",[t._v("由于 Loader 对文件的转换操作很耗时，需要让尽可能少的文件被 Loader 处理。")]),e("p",[t._v("在"),e("router-link",{attrs:{to:"./../setting/setting-3.html"}},[t._v("Module")]),t._v(" 中介绍过在使用 Loader 时可以通过 "),e("code",[t._v("test")]),t._v(" 、 "),e("code",[t._v("include")]),t._v(" 、 "),e("code",[t._v("exclude")]),t._v(" 三个配置项来命中 Loader 要应用规则的文件。 为了尽可能少的让文件被 Loader 处理，可以通过 "),e("code",[t._v("include")]),t._v(" 去命中只有哪些文件需要被处理。")],1),t._m(3),t._m(4),t._m(5),t._m(6),e("p",[t._v("在"),e("router-link",{attrs:{to:"./../setting/setting-4.html"}},[t._v("Resolve")]),t._v(" 中介绍过 "),e("code",[t._v("resolve.modules")]),t._v(" 用于配置 Webpack "),e("strong",[t._v("去哪些目录下寻找第三方模块")]),t._v("。")],1),t._m(7),t._m(8),t._m(9),t._m(10),e("p",[t._v("在"),e("router-link",{attrs:{to:"./../setting/setting-4.html"}},[t._v("Resolve")]),t._v(" 中介绍过 "),e("code",[t._v("resolve.mainFields")]),t._v(" 用于配置第三方模块使用哪个入口文件。")],1),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),e("p",[t._v("在"),e("router-link",{attrs:{to:"./../setting/setting-4.html"}},[t._v("Resolve")]),t._v(" 中介绍过 "),e("code",[t._v("resolve.alias")]),t._v(" 配置项通过别名来把原导入路径映射成一个新的导入路径。")],1),t._m(22),t._m(23),e("p",[t._v("可以看到发布出去的 React 库中包含两套代码：")]),t._m(24),t._m(25),e("p",[t._v("相关 Webpack 配置如下：")]),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),e("p",[t._v("相关 Webpack 配置如下：")]),t._m(34),t._m(35),e("p",[t._v("在"),e("router-link",{attrs:{to:"./../setting/setting-3.html"}},[t._v("Module")]),t._v(" 中介绍过 "),e("code",[t._v("module.noParse")]),t._v(" 配置项可以让 Webpack 忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能。")],1),t._m(36),t._m(37),t._m(38),t._m(39),e("p",[t._v("以上就是所有和缩小文件搜索范围相关的构建性能优化了，在根据自己项目的需要去按照以上方法改造后，你的构建速度一定会有所提升。")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"_4-1-缩小文件搜索范围"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-缩小文件搜索范围","aria-hidden":"true"}},[this._v("#")]),this._v(" 4-1 缩小文件搜索范围")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ol",[e("li",[t._v("根据导入语句去寻找对应的要导入的文件。例如 "),e("code",[t._v("require('react')")]),t._v(" 导入语句对应的文件是 "),e("code",[t._v("./node_modules/react/react.js")]),t._v("，"),e("code",[t._v("require('./util')")]),t._v(" 对应的文件是 "),e("code",[t._v("./util.js")]),t._v("。")]),e("li",[t._v("根据找到的要导入文件的后缀，使用配置中的 Loader 去处理文件。例如使用 ES6 开发的 JavaScript 文件需要使用 "),e("code",[t._v("babel-loader")]),t._v(" 去处理。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-loader-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-loader-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 loader 配置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以采用 ES6 的项目为例，在配置 "),s("code",[this._v("babel-loader")]),this._v(" 时，可以这样：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    rules"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果项目源码中只有 js 文件就不要写成 /\\.jsx?$/，提升正则表达式性能")]),t._v("\n        test"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\.js$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// babel-loader 支持缓存转换出的结果，通过 cacheDirectory 选项开启")]),t._v("\n        use"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"babel-loader?cacheDirectory"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只对项目根目录下的 src 目录中的文件采用 babel-loader")]),t._v("\n        include"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"src"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("你可以适当的调整项目的目录结构，以方便在配置 Loader 时通过 "),s("code",[this._v("include")]),this._v(" 去缩小命中范围。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-resolve-modules-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-resolve-modules-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 resolve.modules 配置")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("resolve.modules")]),t._v(" 的默认值是 "),e("code",[t._v("['node_modules']")]),t._v("，含义是先去当前目录下的 "),e("code",[t._v("./node_modules")]),t._v(" 目录下去找想找的模块，如果没找到就去上一级目录 "),e("code",[t._v("../node_modules")]),t._v(" 中找，再没有就去 "),e("code",[t._v("../../node_modules")]),t._v("中找，以此类推，这和 Node.js 的模块寻找机制很相似。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当安装的第三方模块都放在项目根目录下的 "),s("code",[this._v("./node_modules")]),this._v(" 目录下时，没有必要按照默认的方式去一层层的寻找，可以指明存放第三方模块的绝对路径，以减少寻找，配置如下：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用绝对路径指明第三方模块存放的位置，以减少搜索步骤")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 其中 __dirname 表示当前工作目录，也就是项目根目录")]),t._v("\n    modules"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"node_modules"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-resolve-mainfields-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-resolve-mainfields-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 "),s("code",[this._v("resolve.mainFields")]),this._v(" 配置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("安装的第三方模块中都会有一个 "),s("code",[this._v("package.json")]),this._v(" 文件用于描述这个模块的属性，其中有些字段用于描述入口文件在哪里，"),s("code",[this._v("resolve.mainFields")]),this._v(" 用于配置采用哪个字段作为入口文件的描述。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以存在多个字段描述入口文件的原因是因为有些模块可以同时用在多个环境中，准对不同的运行环境需要使用不同的代码。 以 "),s("code",[this._v("isomorphic-fetch")]),this._v(" 为例，它是 "),s("code",[this._v("fetch API")]),this._v(" 的一个实现，但可同时用于浏览器和 Node.js 环境。 它的 "),s("code",[this._v("package.json")]),this._v(" 中就有 2 个入口文件描述字段：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-json extra-class"},[e("pre",{pre:!0,attrs:{class:"language-json"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"browser"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fetch-npm-browserify.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token property"}},[t._v('"main"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fetch-npm-node.js"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[e("code",[t._v("isomorphic-fetch")]),t._v(" 在不同的运行环境下使用不同的代码是因为 "),e("code",[t._v("fetch API")]),t._v(" 的实现机制不一样，在浏览器中通过原生的 "),e("code",[t._v("fetch")]),t._v(" 或者 "),e("code",[t._v("XMLHttpRequest")]),t._v(" 实现，在 Node.js 中通过 http 模块实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("resolve.mainFields")]),this._v(" 的默认值和当前的 target 配置有关系，对应关系如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("当 target 为 web 或者 webworker 时，值是 "),s("code",[this._v('["browser", "module", "main"]')])]),s("li",[this._v("当 target 为其它情况时，值是 "),s("code",[this._v('["module", "main"]')])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("以 "),e("code",[t._v("target")]),t._v(" 等于 "),e("code",[t._v("web")]),t._v(" 为例，Webpack 会先采用第三方模块中的 "),e("code",[t._v("browser")]),t._v(" 字段去寻找模块的入口文件，如果不存在就采用 "),e("code",[t._v("module")]),t._v(" 字段，以此类推。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了减少搜索步骤，在你明确第三方模块的入口文件描述字段时，你可以把它设置的尽量少。 由于大多数第三方模块都采用 "),s("code",[this._v("main")]),this._v(" 字段去描述入口文件的位置，可以这样配置 Webpack：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只采用 main 字段作为入口文件描述字段，以减少搜索步骤")]),t._v("\n    mainFields"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("使用本方法优化时，你需要考虑到所有运行时依赖的第三方模块的入口文件描述字段，就算有一个模块搞错了都可能会造成构建出的代码无法正常运行。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-resolve-alias-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-resolve-alias-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 resolve.alias 配置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在实战项目中经常会依赖一些庞大的第三方模块，以 React 库为例，安装到 "),s("code",[this._v("node_modules")]),this._v(" 目录下的 React 库的目录结构如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("├── dist\n│   ├── react.js\n│   └── react.min.js\n├── lib\n│   ... 还有几十个文件被忽略\n│   ├── LinkedStateMixin.js\n│   ├── createClass.js\n│   └── React.js\n├── package.json\n└── react.js\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ol",[e("li",[t._v("一套是采用 CommonJS 规范的模块化代码，这些文件都放在 lib 目录下，以 "),e("code",[t._v("package.json")]),t._v(" 中指定的入口文件 react.js 为模块的入口。")]),e("li",[t._v("一套是把 React 所有相关的代码打包好的完整代码放到一个单独的文件中，这些代码没有采用模块化可以直接执行。其中 "),e("code",[t._v("dist/react.js")]),t._v(" 是用于开发环境，里面包含检查和警告的代码。"),e("code",[t._v("dist/react.min.js")]),t._v(" 是用于线上环境，被最小化了。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("默认情况下 Webpack 会从入口文件 "),e("code",[t._v("./node_modules/react/react.js")]),t._v(" 开始递归的解析和处理依赖的几十个文件，这会时一个耗时的操作。 通过配置 "),e("code",[t._v("resolve.alias")]),t._v(" 可以让 Webpack 在处理 React 库时，"),e("strong",[t._v("直接使用")]),t._v("单独完整的 "),e("code",[t._v("react.min.js")]),t._v(" 文件，从而跳过 "),e("strong",[t._v("耗时的递归解析")]),t._v("操作。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 alias 把导入 react 的语句换成直接使用单独完整的 react.min.js 文件，")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 减少耗时的递归解析操作")]),t._v("\n    alias"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      react"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" path"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"./node_modules/react/dist/react.min.js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("blockquote",[e("p",[t._v("除了 React 库外，大多数库发布到 Npm 仓库中时都会包含打包好的完整文件，对于这些库你也可以对它们配置 "),e("code",[t._v("alias")]),t._v("。")]),e("p",[t._v("但是对于有些库使用本优化方法后会影响到后面要讲的使用 "),e("code",[t._v("Tree-Shaking")]),t._v(" 去除无效代码的优化，因为打包好的完整文件中有部分代码你的项目可能永远用不上。 一般对整体性比较强的库采用本方法优化，因为完整文件中的代码是一个整体，每一行都是不可或缺的。 但是对于一些工具类的库，例如 "),e("code",[t._v("lodash")]),t._v("，你的项目可能只用到了其中几个工具函数，你就不能使用本方法去优化，因为这会导致你的输出代码中包含很多永远不会执行的代码。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-resolve-extensions-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-resolve-extensions-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 resolve.extensions 配置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在导入语句没带文件后缀时，Webpack 会自动带上后缀后去尝试询问文件是否存在。 在 2-4 Resolve 中介绍过 "),s("code",[this._v("resolve.extensions")]),this._v("用于配置在尝试过程中用到的后缀列表，默认是：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("extensions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('".json"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说当遇到 "),s("code",[this._v("require('./data')")]),this._v("这样的导入语句时，Webpack 会先去寻找 "),s("code",[this._v("./data.js")]),this._v("文件，如果该文件不存在就去寻找 "),s("code",[this._v("./data.json")]),this._v("文件，如果还是找不到就报错。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果这个列表越长，或者正确的后缀在越后面，就会造成尝试的次数越多，所以 "),s("code",[this._v("resolve.extensions")]),this._v(" 的配置也会影响到构建的性能。 在配置 "),s("code",[this._v("resolve.extensions")]),this._v(" 时你需要遵守以下几点，以做到尽可能的优化构建性能：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("后缀尝试列表要尽可能的小，不要把项目中不可能存在的情况写到后缀尝试列表中。")]),s("li",[this._v("频率出现最高的文件后缀要优先放在最前面，以做到尽快的退出寻找过程。")]),s("li",[this._v("在源码中写导入语句时，要尽可能的带上后缀，从而可以避免寻找过程。例如在你确定的情况下把 "),s("code",[this._v("require('./data')")]),this._v(" 写成 "),s("code",[this._v("require('./data.json')")]),this._v("。")])])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  resolve"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 尽可能的减少后缀尝试的可能性")]),t._v("\n    extensions"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"js"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"优化-module-noparse-配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化-module-noparse-配置","aria-hidden":"true"}},[this._v("#")]),this._v(" 优化 module.noParse 配置")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原因是一些库，例如 "),s("code",[this._v("jQuery")]),this._v(" 、"),s("code",[this._v("ChartJS")]),this._v("， 它们庞大又没有采用模块化标准，让 Webpack 去解析这些文件耗时又没有意义。")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("p",[t._v("在上面的 优化 "),e("code",[t._v("resolve.alias")]),t._v(" 配置 中讲到单独完整的 "),e("code",[t._v("react.min.js")]),t._v(" 文件就没有采用模块化，让我们来通过配置 "),e("code",[t._v("module.noParse")]),t._v(" 忽略对 "),e("code",[t._v("react.min.js")]),t._v(" 文件的递归解析处理， 相关 Webpack 配置如下：")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" path "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"path"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nmodule"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("exports "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  module"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 独完整的 `react.min.js` 文件就没有采用模块化，忽略对 `react.min.js` 文件的递归解析处理")]),t._v("\n    noParse"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/react\\.min\\.js$/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("注意被忽略掉的文件里不应该包含 "),s("code",[this._v("import")]),this._v(" 、 "),s("code",[this._v("require")]),this._v(" 、 "),s("code",[this._v("define")]),this._v(" 等模块化语句，不然会导致构建出的代码中包含无法在浏览器环境下执行的模块化语句。")])])}],!1,null,null,null);s.default=n.exports}}]);