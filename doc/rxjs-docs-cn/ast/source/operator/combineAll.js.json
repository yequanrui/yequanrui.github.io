{
  "type": "Program",
  "body": [
    {
      "type": "ImportDeclaration",
      "specifiers": [
        {
          "type": "ImportSpecifier",
          "local": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              9,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "imported": {
            "type": "Identifier",
            "name": "CombineLatestOperator",
            "range": [
              9,
              30
            ],
            "loc": {
              "start": {
                "line": 1,
                "column": 9
              },
              "end": {
                "line": 1,
                "column": 30
              }
            }
          },
          "range": [
            9,
            30
          ],
          "loc": {
            "start": {
              "line": 1,
              "column": 9
            },
            "end": {
              "line": 1,
              "column": 30
            }
          }
        }
      ],
      "source": {
        "type": "Literal",
        "value": "./combineLatest",
        "raw": "'./combineLatest'",
        "range": [
          38,
          55
        ],
        "loc": {
          "start": {
            "line": 1,
            "column": 38
          },
          "end": {
            "line": 1,
            "column": 55
          }
        }
      },
      "range": [
        0,
        56
      ],
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 1,
          "column": 56
        }
      },
      "trailingComments": [
        {
          "type": "Block",
          "value": "*\n * 通过等待外部 Observable 完成然后应用 {@link combineLatest} ，将高阶 Observable 转化为一阶 Observable。\n *\n * <span class=\"informal\">当高阶 Observable 完成时，通过使用 {@link combineLatest} 将其打平。</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * 接受一个返回 Observables 的 Observable, 并从中收集所有的 Observables 。 一旦最外部的\n * Observable 完成, 会订阅所有收集的 Observables 然后通过{@link combineLatest}合并值,\n *  这样:\n * - 每次内部 Observable 发出的时候, 外部 Observable 也发出。\n * - 当返回的 observable 发出的时候, 它会通过如下方式发出所有最新的值：\n *   - 如果提供了｀project｀函数, 该函数会按内部 Observable 到达的顺序依次使用每个内部 Observable 的最新值进行调用。\n *   - 如果没有提供｀project｀函数, 包含所有最新数据的数组会被输出 Observable 发出。\n *\n * @example <caption>将两个点击事件映射为有限的 interval Observable，然后应用 combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] 它按顺序的从每个收集到的内部 Observable 中接收最新值作为参数。\n * @return {Observable} 该 Observable 为最新值的投射结果或数组。\n * @method combineAll\n * @owner Observable\n ",
          "range": [
            57,
            1223
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ]
    },
    {
      "type": "ExportNamedDeclaration",
      "declaration": {
        "type": "FunctionDeclaration",
        "id": {
          "type": "Identifier",
          "name": "combineAll",
          "range": [
            1240,
            1250
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 16
            },
            "end": {
              "line": 33,
              "column": 26
            }
          }
        },
        "params": [
          {
            "type": "Identifier",
            "name": "project",
            "range": [
              1251,
              1258
            ],
            "loc": {
              "start": {
                "line": 33,
                "column": 27
              },
              "end": {
                "line": 33,
                "column": 34
              }
            }
          }
        ],
        "body": {
          "type": "BlockStatement",
          "body": [
            {
              "type": "ReturnStatement",
              "argument": {
                "type": "CallExpression",
                "callee": {
                  "type": "MemberExpression",
                  "computed": false,
                  "object": {
                    "type": "ThisExpression",
                    "range": [
                      1273,
                      1277
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 11
                      },
                      "end": {
                        "line": 34,
                        "column": 15
                      }
                    }
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "lift",
                    "range": [
                      1278,
                      1282
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 16
                      },
                      "end": {
                        "line": 34,
                        "column": 20
                      }
                    }
                  },
                  "range": [
                    1273,
                    1282
                  ],
                  "loc": {
                    "start": {
                      "line": 34,
                      "column": 11
                    },
                    "end": {
                      "line": 34,
                      "column": 20
                    }
                  }
                },
                "arguments": [
                  {
                    "type": "NewExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "CombineLatestOperator",
                      "range": [
                        1287,
                        1308
                      ],
                      "loc": {
                        "start": {
                          "line": 34,
                          "column": 25
                        },
                        "end": {
                          "line": 34,
                          "column": 46
                        }
                      }
                    },
                    "arguments": [
                      {
                        "type": "Identifier",
                        "name": "project",
                        "range": [
                          1309,
                          1316
                        ],
                        "loc": {
                          "start": {
                            "line": 34,
                            "column": 47
                          },
                          "end": {
                            "line": 34,
                            "column": 54
                          }
                        }
                      }
                    ],
                    "range": [
                      1283,
                      1317
                    ],
                    "loc": {
                      "start": {
                        "line": 34,
                        "column": 21
                      },
                      "end": {
                        "line": 34,
                        "column": 55
                      }
                    }
                  }
                ],
                "range": [
                  1273,
                  1318
                ],
                "loc": {
                  "start": {
                    "line": 34,
                    "column": 11
                  },
                  "end": {
                    "line": 34,
                    "column": 56
                  }
                }
              },
              "range": [
                1266,
                1319
              ],
              "loc": {
                "start": {
                  "line": 34,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 57
                }
              }
            }
          ],
          "range": [
            1260,
            1321
          ],
          "loc": {
            "start": {
              "line": 33,
              "column": 36
            },
            "end": {
              "line": 35,
              "column": 1
            }
          }
        },
        "generator": false,
        "expression": false,
        "range": [
          1231,
          1321
        ],
        "loc": {
          "start": {
            "line": 33,
            "column": 7
          },
          "end": {
            "line": 35,
            "column": 1
          }
        },
        "leadingComments": [
          {
            "type": "Block",
            "value": "*\n * 通过等待外部 Observable 完成然后应用 {@link combineLatest} ，将高阶 Observable 转化为一阶 Observable。\n *\n * <span class=\"informal\">当高阶 Observable 完成时，通过使用 {@link combineLatest} 将其打平。</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * 接受一个返回 Observables 的 Observable, 并从中收集所有的 Observables 。 一旦最外部的\n * Observable 完成, 会订阅所有收集的 Observables 然后通过{@link combineLatest}合并值,\n *  这样:\n * - 每次内部 Observable 发出的时候, 外部 Observable 也发出。\n * - 当返回的 observable 发出的时候, 它会通过如下方式发出所有最新的值：\n *   - 如果提供了｀project｀函数, 该函数会按内部 Observable 到达的顺序依次使用每个内部 Observable 的最新值进行调用。\n *   - 如果没有提供｀project｀函数, 包含所有最新数据的数组会被输出 Observable 发出。\n *\n * @example <caption>将两个点击事件映射为有限的 interval Observable，然后应用 combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] 它按顺序的从每个收集到的内部 Observable 中接收最新值作为参数。\n * @return {Observable} 该 Observable 为最新值的投射结果或数组。\n * @method combineAll\n * @owner Observable\n ",
            "range": [
              57,
              1223
            ],
            "loc": {
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 32,
                "column": 3
              }
            }
          }
        ],
        "trailingComments": [
          {
            "type": "Line",
            "value": "# sourceMappingURL=combineAll.js.map",
            "range": [
              1322,
              1360
            ],
            "loc": {
              "start": {
                "line": 36,
                "column": 0
              },
              "end": {
                "line": 36,
                "column": 38
              }
            }
          }
        ]
      },
      "specifiers": [],
      "source": null,
      "range": [
        1224,
        1321
      ],
      "loc": {
        "start": {
          "line": 33,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 1
        }
      },
      "leadingComments": [
        {
          "type": "Block",
          "value": "*\n * 通过等待外部 Observable 完成然后应用 {@link combineLatest} ，将高阶 Observable 转化为一阶 Observable。\n *\n * <span class=\"informal\">当高阶 Observable 完成时，通过使用 {@link combineLatest} 将其打平。</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * 接受一个返回 Observables 的 Observable, 并从中收集所有的 Observables 。 一旦最外部的\n * Observable 完成, 会订阅所有收集的 Observables 然后通过{@link combineLatest}合并值,\n *  这样:\n * - 每次内部 Observable 发出的时候, 外部 Observable 也发出。\n * - 当返回的 observable 发出的时候, 它会通过如下方式发出所有最新的值：\n *   - 如果提供了｀project｀函数, 该函数会按内部 Observable 到达的顺序依次使用每个内部 Observable 的最新值进行调用。\n *   - 如果没有提供｀project｀函数, 包含所有最新数据的数组会被输出 Observable 发出。\n *\n * @example <caption>将两个点击事件映射为有限的 interval Observable，然后应用 combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] 它按顺序的从每个收集到的内部 Observable 中接收最新值作为参数。\n * @return {Observable} 该 Observable 为最新值的投射结果或数组。\n * @method combineAll\n * @owner Observable\n ",
          "range": [
            57,
            1223
          ],
          "loc": {
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 3
            }
          }
        }
      ],
      "trailingComments": [
        {
          "type": "Line",
          "value": "# sourceMappingURL=combineAll.js.map",
          "range": [
            1322,
            1360
          ],
          "loc": {
            "start": {
              "line": 36,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 38
            }
          }
        }
      ]
    }
  ],
  "sourceType": "module",
  "range": [
    0,
    1321
  ],
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 35,
      "column": 1
    }
  },
  "comments": [
    {
      "type": "Block",
      "value": "*\n * 通过等待外部 Observable 完成然后应用 {@link combineLatest} ，将高阶 Observable 转化为一阶 Observable。\n *\n * <span class=\"informal\">当高阶 Observable 完成时，通过使用 {@link combineLatest} 将其打平。</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * 接受一个返回 Observables 的 Observable, 并从中收集所有的 Observables 。 一旦最外部的\n * Observable 完成, 会订阅所有收集的 Observables 然后通过{@link combineLatest}合并值,\n *  这样:\n * - 每次内部 Observable 发出的时候, 外部 Observable 也发出。\n * - 当返回的 observable 发出的时候, 它会通过如下方式发出所有最新的值：\n *   - 如果提供了｀project｀函数, 该函数会按内部 Observable 到达的顺序依次使用每个内部 Observable 的最新值进行调用。\n *   - 如果没有提供｀project｀函数, 包含所有最新数据的数组会被输出 Observable 发出。\n *\n * @example <caption>将两个点击事件映射为有限的 interval Observable，然后应用 combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] 它按顺序的从每个收集到的内部 Observable 中接收最新值作为参数。\n * @return {Observable} 该 Observable 为最新值的投射结果或数组。\n * @method combineAll\n * @owner Observable\n ",
      "range": [
        57,
        1223
      ],
      "loc": {
        "start": {
          "line": 2,
          "column": 0
        },
        "end": {
          "line": 32,
          "column": 3
        }
      }
    },
    {
      "type": "Line",
      "value": "# sourceMappingURL=combineAll.js.map",
      "range": [
        1322,
        1360
      ],
      "loc": {
        "start": {
          "line": 36,
          "column": 0
        },
        "end": {
          "line": 36,
          "column": 38
        }
      }
    }
  ]
}